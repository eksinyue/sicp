      <SUBSECTION>
        <LABEL NAME="sec:evaluating-combinations"/>
        <INDEX>combination<SUBINDEX>evaluation of</SUBINDEX></INDEX>
        <INDEX>evaluation<SUBINDEX>of a combination</SUBINDEX></INDEX>
        <NAME>
          Evaluating
          <SPLITINLINE><SCHEME>Combinations</SCHEME><JAVASCRIPT>Operator Combinations</JAVASCRIPT></SPLITINLINE>
        </NAME>

        <SPLIT>
          <SCHEME>
            <TEXT>
              One of our goals in this chapter is to isolate issues about thinking
              procedurally.  As a case in point, let us consider that, in evaluating
              combinations, the interpreter is itself following a procedure.
              <UL>
                <LI>To evaluate a combination, do the following:
                  <OL>
                    <LI>Evaluate the subexpressions of the combination.</LI>
                    <LI>Apply the procedure that is the value of the leftmost
                      subexpression (the operator) to the arguments that are the values of
                      the other subexpressions (the operands).
                    </LI>
                  </OL>
                </LI>
              </UL>
              Even this simple rule illustrates some important points about
              processes in general. First, observe that the first step dictates
              that in order to accomplish the evaluation process for a
              combination we must first perform the evaluation process on each
              element of the combination. Thus, the evaluation rule is
              <INDEX>recursion</INDEX>
              <EM>recursive</EM> in nature;
              that is, it includes, as one of its steps, the need to invoke the rule
              itself.<FOOTNOTE>It may seem strange that the evaluation rule says, as
                part of the first step, that we should evaluate the leftmost element
                of a combination, since at this point that can only be an operator
                such as <SCHEMEINLINE>+</SCHEMEINLINE> or <SCHEMEINLINE>*</SCHEMEINLINE>
                representing a built-in primitive procedure such as addition or
                multiplication.  We will see later that it is useful to be able to work with
                combinations whose operators are themselves compound expressions.
              </FOOTNOTE>
            </TEXT>
            <TEXT>
              <INDEX>recursion<SUBINDEX>expressing complicated process</SUBINDEX></INDEX>
              Notice how succinctly the idea of recursion can be used to express
              what, in the case of a deeply nested combination, would otherwise be
              viewed as a rather complicated process.  For example, evaluating
              <SNIPPET>
                <SCHEME>
(* (+ 2 (* 4 6))
   (+ 3 5 7))
                </SCHEME>
              </SNIPPET>
              requires that the evaluation rule be applied to four different
              combinations.  We can obtain a picture of this process by
              <INDEX>combination<SUBINDEX><ORDER>tree</ORDER>as a tree</SUBINDEX></INDEX>
              representing
              the combination in the form of a
              <INDEX>tree<SUBINDEX>combination viewed as</SUBINDEX></INDEX>
              tree, as shown in
              Figure <REF NAME="fig:tree-comb"/>.
              Each combination is represented by a
              <INDEX>node of a tree</INDEX>
              node with
              <INDEX>branch<SUBINDEX>branch of a tree</SUBINDEX></INDEX>
              branches corresponding to the operator and the
              operands of the combination stemming from it.
              The
              <INDEX>terminal node of a tree</INDEX>
              terminal nodes (that is, nodes with
              no branches stemming from them) represent either operators or numbers.
              Viewing evaluation in terms of the tree, we can imagine that the
              values of the operands percolate upward, starting from the terminal
              nodes and then combining at higher and higher levels.  In general, we
              shall see that recursion is a very powerful technique for dealing with
              hierarchical, treelike objects.  In fact, the <QUOTE>percolate values
                upward</QUOTE> form of the evaluation rule is an example of a general kind
              of process known as
              <INDEX>tree accumulation</INDEX>
              <EM>tree accumulation</EM>.

              <FIGURE src="img_original/ch1-Z-G-1.svg">
                <LABEL NAME="fig:tree-comb"/>
                <CAPTION>Tree representation, showing the value of each subcombination.
                </CAPTION>
              </FIGURE>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              One of our goals in this chapter is to isolate issues about process
              descriptions.  As a case in point, let us consider that, in evaluating
              operator combinations, the interpreter proceeds as follows.
              <UL>
                <LI>To evaluate an operator combination, do the following:
                  <OL>
                    <LI>Evaluate the operand expressions of the combination.</LI>
                    <LI>Apply the function that is denoted by
                      the operator to the arguments that are the values of
                      the operands.
                    </LI>
                  </OL>
                </LI>
              </UL>
              Even this simple rule illustrates some important points about
              processes in general. First, observe that the first step dictates
              that in order to accomplish the evaluation process for an operator
              expression
              we must first perform the evaluation process on each operand of the
              operator combination.  Thus, the evaluation rule is
              <INDEX>recursion</INDEX>
              <EM>recursive</EM> in nature;
              that is, it includes, as one of its steps, the need to invoke the rule
              itself.
            </TEXT>
            <TEXT>
              <INDEX>recursion<SUBINDEX>expressing complicated process</SUBINDEX></INDEX>
              Notice how succinctly the idea of recursion can be used to express
              what, in the case of a deeply nested combination, would otherwise be
              viewed as a rather complicated process.  For example, evaluating
              <SNIPPET>
                <JAVASCRIPT>
(2 + 4 * 6) * (3 + 12);
                </JAVASCRIPT>
              </SNIPPET>
              requires that the evaluation rule be applied to four different
              combinations.  We can obtain a picture of this process by
              <INDEX>expression<SUBINDEX><ORDER>tree</ORDER>as a tree</SUBINDEX></INDEX>
              representing
              the combination in the form of a
              <INDEX>tree<SUBINDEX>combination viewed as</SUBINDEX></INDEX>
              tree, as shown in
              Figure <REF NAME="fig:tree-comb-javascript"/>.
              Each combination is represented by a
              <INDEX>node of a tree</INDEX>
              node with
              <INDEX>branch<SUBINDEX>branch of a tree</SUBINDEX></INDEX>
              branches corresponding to the operator and the
              operands of the operator combination stemming from it.
              The
              <INDEX>terminal node of a tree</INDEX>
              terminal nodes (that is, nodes with
              no branches stemming from them) represent either operators or numbers.
              Viewing evaluation in terms of the tree, we can imagine that the
              values of the operands percolate upward, starting from the terminal
              nodes and then combining at higher and higher levels.  In general, we
              shall see that recursion is a very powerful technique for dealing with
              hierarchical, treelike objects.  In fact, the <QUOTE>percolate values
                upward</QUOTE> form of the evaluation rule is an example of a general kind
              of process known as
              <INDEX>tree accumulation</INDEX>
              <EM>tree accumulation</EM>.

              <FIGURE>
                <FIGURE src="img_javascript/ch1-Z-G-1.svg"></FIGURE>
                <LABEL NAME="fig:tree-comb-javascript"/>
                <CAPTION>Tree representation, showing the value of each subexpression.
                </CAPTION>
              </FIGURE>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Next, observe that the repeated application of the first step brings
              us to the point where we need to evaluate, not combinations, but
              primitive expressions such as numerals, built-in operators, or other
              names.  We take care of the primitive cases by stipulating that
              <INDEX>primitive expression<SUBINDEX>evaluation of</SUBINDEX></INDEX>
              <INDEX>evaluation<SUBINDEX>of primitive expressions</SUBINDEX></INDEX>
              <UL>
                <LI>
                  the values of numerals are the numbers that they name,
                </LI>
                <LI>
                  the values of built-in operators are the machine
                  instruction sequences that carry out the corresponding operations, and
                </LI>
                <LI>
                  the values of other names are the objects associated
                  with those names in the environment.
                </LI>
              </UL>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Next, observe that the repeated application of the first step brings
              us to the point where we need to evaluate, not operator combinations, but
              primitive expressions such as numerals or
              names.  We take care of the primitive cases by stipulating that
              <INDEX>primitive expression<SUBINDEX>evaluation of</SUBINDEX></INDEX>
              <INDEX>evaluation<SUBINDEX>of primitive expressions</SUBINDEX></INDEX>
              <UL>
                <LI>
                  the values of numerals are the numbers that they name,
                </LI>
                <LI>
                  the values of names are the objects associated
                  with those names in the environment.
                </LI>
              </UL>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              We may regard the second rule as a special case of the third one by
              stipulating that symbols such as <SCHEMEINLINE>+</SCHEMEINLINE>
              and <SCHEMEINLINE>*</SCHEMEINLINE> are also included
              in the global environment, and are associated with the sequences of
              machine instructions that are their <QUOTE>values.</QUOTE>  The key point to
              notice is the role of the
              <INDEX>environment<SUBINDEX><ORDER>context</ORDER>as context for evaluation
              </SUBINDEX></INDEX>
              environment in determining the meaning of
              the symbols in expressions.  In an interactive language such as
              Lisp, it is meaningless to speak of the value of an expression such as
              <SCHEMEINLINE>(+ x 1)</SCHEMEINLINE>
              without specifying any information about the environment
              that would provide a meaning for the symbol
              <SCHEMEINLINE>x</SCHEMEINLINE> (or even for the
              symbol <SCHEMEINLINE>+</SCHEMEINLINE>).
              As we shall see in chapter 3, the general notion of
              the environment as providing a context in which evaluation takes place
              will play an important role in our understanding of program execution.
              <INDEX>combination<SUBINDEX>evaluation of</SUBINDEX></INDEX>
              <INDEX>evaluation<SUBINDEX>of a combination</SUBINDEX></INDEX>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Notice the role of the
              <INDEX>environment<SUBINDEX><ORDER>context</ORDER>as context for evaluation
              </SUBINDEX></INDEX>
              environment in determining the meaning of
              the names in expressions.  In
              JavaScript, it is meaningless to speak of the value of an expression such as
              <JAVASCRIPTINLINE>x + 1</JAVASCRIPTINLINE>
              without specifying any information about the environment
              that would provide a meaning for the
              name <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE>.
              As we shall see in chapter 3, the general notion of
              the environment as providing a context in which evaluation takes place
              will play an important role in our understanding of program execution.
              <INDEX>operator combination<SUBINDEX>evaluation of</SUBINDEX></INDEX>
              <INDEX>evaluation<SUBINDEX>of an operator combination</SUBINDEX></INDEX>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              <!-- \indsf{define}[why a special form] -->
              Notice that the
              evaluation rule given above does not handle definitions.
              For instance, evaluating
              <SCHEMEINLINE>(define x 3)</SCHEMEINLINE>
              does not apply <SCHEMEINLINE>define</SCHEMEINLINE> to two arguments, one
              of which is the value of the symbol
              <SCHEMEINLINE>x</SCHEMEINLINE> and the other of which is
              3, since the purpose of the
              <SCHEMEINLINE>define</SCHEMEINLINE> is precisely to associate
              <SCHEMEINLINE>x</SCHEMEINLINE> with a value.
              (That is, <SCHEMEINLINE>(define x 3)</SCHEMEINLINE> is not
              a combination.)
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Notice that the
              evaluation rule given above does not handle constant declarations.
              For instance, evaluating
              <JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
              does not apply the <JAVASCRIPTINLINE>=</JAVASCRIPTINLINE>
              operator to two arguments, one
              of which is the value of the name
              <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> and the other of which is
              3, since the purpose of the constant declaration
              is precisely to associate
              <JAVASCRIPTINLINE>x</JAVASCRIPTINLINE> with a value.
              (That is, the part <JAVASCRIPTINLINE>x = 3</JAVASCRIPTINLINE>
              in the constant declaration
              <JAVASCRIPTINLINE>const x = 3;</JAVASCRIPTINLINE>
              is not an operator combination.)
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              <INDEX>special form</INDEX>
              Such exceptions to the general evaluation rule are called <EM>special
                forms</EM>.
              <SCHEMEINLINE>Define</SCHEMEINLINE>
              is the only example of a special form that we
              have seen so far, but we will meet others shortly.
              <INDEX>evaluation<SUBINDEX>of special forms</SUBINDEX></INDEX>
              Each special form
              has its own evaluation rule. The various kinds of expressions (each
              with its associated evaluation rule) constitute the
              <INDEX>syntax<SUBINDEX><ORDER>programming</ORDER>
                  of a programming language</SUBINDEX></INDEX>
              syntax of the
              programming language.  In comparison with most other programming
              languages, Lisp has a very simple syntax; that is, the evaluation rule
              for expressions can be described by a simple general rule together
              with specialized rules for a small number of special
              forms.<FOOTNOTE>
                <INDEX>Perlis, Alan J.<SUBINDEX>quips</SUBINDEX></INDEX>
                <INDEX>Landin, Peter</INDEX>
                <INDEX>syntactic sugar</INDEX>
                <INDEX>semicolon</INDEX>
                <INDEX>cancer of the semicolon</INDEX>
                <INDEX>Pascal</INDEX>
                <INDEX>Lisp<SUBINDEX>Pascal vs.</SUBINDEX></INDEX>
                Special syntactic forms that are simply convenient
                alternative surface structures for things that can be written in more
                uniform ways are sometimes called <EM>syntactic sugar</EM>, to use a
                phrase coined by Peter Landin.  In comparison with users of other
                languages, Lisp programmers, as a rule, are less concerned with
                matters of syntax.  (By contrast, examine any Pascal manual and notice
                how much of it is devoted to descriptions of syntax.)  This disdain
                for syntax is due partly to the flexibility of Lisp, which makes it
                easy to change surface syntax, and partly to the observation that many
                <QUOTE>convenient</QUOTE> syntactic constructs, which make the language less
                uniform, end up causing more trouble than they are worth when programs
                become large and complex.  In the words of Alan Perlis, <QUOTE>Syntactic
                  sugar causes cancer of the semicolon.</QUOTE></FOOTNOTE>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              The string <QUOTE><JAVASCRIPTINLINE>const</JAVASCRIPTINLINE></QUOTE>
              in the constant declaration is rendered in bold letters to indicate that it
              is a <EM>keyword</EM> in JavaScript. Keywords are reserved words that
              carry a particular meaning, and thus cannot be used as names.
              A keyword or a combination of keywords instructs the
              JavaScript interpreter to treat the respective statement in a special
              way.
              Each such syntactic form
              has its own evaluation rule. The various kinds of statements (each
              with its associated evaluation rule) constitute the
              <INDEX>syntax<SUBINDEX><ORDER>programming</ORDER>
                  of a programming language</SUBINDEX></INDEX>
              syntax of the
              programming language.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

      </SUBSECTION>
