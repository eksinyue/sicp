      <SUBSECTION>
        <NAME>Naming and the Environment</NAME>
        <LABEL NAME="sec:naming"></LABEL>

        <SPLIT>
          <SCHEME>
            <TEXT>
              A critical aspect of a programming language is the means it provides
              for using
              <INDEX>naming<SUBINDEX>of computational objects</SUBINDEX></INDEX>
              names to refer to computational objects.  We say that the
              <INDEX>primitive expression<SUBINDEX>name of variable</SUBINDEX></INDEX>
              name identifies a
              <INDEX>variable</INDEX>
              <EM>variable</EM> whose
              <INDEX>variable<SUBINDEX>value of</SUBINDEX></INDEX>
              <EM>value</EM> is the object.
            </TEXT>
            <TEXT>
              In the Scheme dialect of Lisp, we
              name things with
              <!--
                  \indsf*{define}
                  \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[define@{\tt define}]
                -->
              <SCHEMEINLINE>define</SCHEMEINLINE>. Typing
              <SNIPPET>
                <NAME>var_size</NAME>
                <SCHEME>
(define size 2)
                </SCHEME>
              </SNIPPET>
              causes the interpreter to associate the value 2 with the
              name <SCHEMEINLINE>size</SCHEMEINLINE>.<FOOTNOTE>
                <!--
                    \indsf{define}[value of]
                  -->
                <INDEX>unspecified values<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
                In this book, we do not show the interpreter<APOS/>s response to
                evaluating definitions, since this is highly
                implementation-dependent.</FOOTNOTE>
              Once the name <SCHEMEINLINE>size</SCHEMEINLINE>
              has been associated with the number 2, we can
              refer to the value 2 by name:

              <SNIPPET>
                <SCHEME>
size
                </SCHEME>
                <SCHEMEOUTPUT>
2
                </SCHEMEOUTPUT>
              </SNIPPET>
              <SNIPPET>
                <SCHEME>
(* 5 size)
                </SCHEME>
                <SCHEMEOUTPUT>
10
                </SCHEMEOUTPUT>
              </SNIPPET>
            </TEXT>
          </SCHEME>

          <JAVASCRIPT>
            <TEXT>
              A critical aspect of a programming language is the means it provides
              for using
              <INDEX>naming<SUBINDEX>of computational objects</SUBINDEX></INDEX>
              names to refer to computational objects,
	      <!--
              <INDEX>primitive expression<SUBINDEX>name of variable</SUBINDEX></INDEX>
              <INDEX>variable</INDEX>
              <EM>variable</EM> whose
              <INDEX>variable<SUBINDEX>value of</SUBINDEX></INDEX>
              <EM>value</EM> is the object.
	      -->
              and our first such means are <em>constants</em>.
	      We say that the name identifies a constant whose
	      <EM>value</EM> is the object.
	    </TEXT>
	    <TEXT>
	      In JavaScript, we name constants using <EM>constant declarations</EM>.
              <!--
                  \indsf*{define}
                  \ind*{special forms (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[define@{\tt define}]
                -->
	      Typing
              <SNIPPET>
                <NAME>var_size</NAME>
                <JAVASCRIPT>
const size = 2;
                </JAVASCRIPT>
              </SNIPPET>
              causes the interpreter to associate the value 2 with the
              name <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>.
	      The purpose of the constant declaration is to
	      create this association,
	      and not to compute a particular value as for
              expression statements. The JavaScript specification
              demands that the special
              value <JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE> shall
	      be the result of evaluating such constant declarations.
            </TEXT>
            <TEXT>
              Once the name <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>
              has been associated with the number 2, we can
              refer to the value 2 by name as in
              <SNIPPET>
                <REQUIRES>var_size</REQUIRES>
                <JAVASCRIPT>
size;
                </JAVASCRIPT>
              </SNIPPET>
	      or
              <SNIPPET>
                <REQUIRES>var_size</REQUIRES>
                <JAVASCRIPT>
5 * size;
                </JAVASCRIPT>
              </SNIPPET>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <JAVASCRIPT>
            <TEXT>
              <EDIT>
              Of course, the JavaScript interpreter needs to execute the constant
              declaration for <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE>
              before the name <JAVASCRIPTINLINE>size</JAVASCRIPTINLINE> can be used
              in an expression. In this online book, the statements that need to be
              evaluated before a new statement are omitted for brevity.
              However, in order to see and play with the
              program, you can click on it.
              The program, preceeded by all required statements, then
              appears in a new browser tab.
              Thus, as a result of clicking on
              <SNIPPET>
                <REQUIRES>var_size</REQUIRES>
                <JAVASCRIPT>
5 * size;
                </JAVASCRIPT>
              </SNIPPET>
              a new tab appears that contains the statement
              <SNIPPET>
                <JAVASCRIPT>
const size = 2;
5 * size;
                </JAVASCRIPT>
              </SNIPPET>
              You notice here that JavaScript statements can be placed in a sequence.
              The interpreter evaluates the components of the sequence in the given order,
              and treats the value of the last component as the value of the sequence.
          </EDIT>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Here are further examples of the use
              of <SCHEMEINLINE>define</SCHEMEINLINE>:

              <SNIPPET>
                <NAME>pi</NAME>
                <SCHEME>
(define pi 3.14159)
                </SCHEME>
              </SNIPPET>

              <SNIPPET>
                <NAME>radius</NAME>
                <SCHEME>
(define radius 10)
                </SCHEME>
              </SNIPPET>

              <SNIPPET>
                <REQUIRES>pi</REQUIRES>
                <REQUIRES>radius</REQUIRES>
                <SCHEME>
(* pi (* radius radius))
                </SCHEME>
                <SCHEMEOUTPUT>
314.159
                </SCHEMEOUTPUT>
              </SNIPPET>

              <SNIPPET>
                <NAME>circumference</NAME>
                <SCHEME>
(define circumference (* 2 pi radius))
                </SCHEME>
              </SNIPPET>
              <SNIPPET>
                <REQUIRES>circumference</REQUIRES>
                <SCHEME>
circumference
                </SCHEME>
                <SCHEMEOUTPUT>
62.8318
                </SCHEMEOUTPUT>
              </SNIPPET>

              <INDEX>means of abstraction<SUBINDEX><ORDER>define</ORDER><TT>define</TT></SUBINDEX></INDEX>
              <SCHEMEINLINE>Define</SCHEMEINLINE> is our language<APOS/>s
              simplest means of abstraction, for it allows us to use simple names to
              refer to the results of compound operations, such as the
              <SCHEMEINLINE>circumference</SCHEMEINLINE> computed above.
              In general, computational objects may have very complex
              structures, and it would be extremely inconvenient to have to remember
              and repeat their details each time we want to use them.  Indeed,
              complex programs are constructed by building, step by step,
              computational objects of increasing complexity. The
              interpreter makes this step-by-step program construction particularly
              convenient because name-object associations can be created
              incrementally in successive interactions.  This feature encourages the
              <INDEX>incremental development of programs</INDEX>
              <INDEX>program<SUBINDEX>incremental development of</SUBINDEX></INDEX>
              incremental development and testing of programs and is largely
              responsible for the fact that
              <INDEX>program<SUBINDEX><ORDER>structure</ORDER>structure of</SUBINDEX></INDEX>
              a Lisp program usually consists of a large
              number of relatively simple procedures.
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Here are further examples of the use of <JAVASCRIPTINLINE>const</JAVASCRIPTINLINE>:
              <SNIPPET>
                <NAME>pi</NAME>
                <JAVASCRIPT>
const pi = 3.14159;
                </JAVASCRIPT>
              </SNIPPET>

              <SNIPPET>
                <NAME>radius</NAME>
                <JAVASCRIPT>
const radius = 10;
                </JAVASCRIPT>
              </SNIPPET>

              <SNIPPET>
                <REQUIRES>pi</REQUIRES>
                <REQUIRES>radius</REQUIRES>
                <JAVASCRIPT>
pi * radius * radius;
                </JAVASCRIPT>
              </SNIPPET>

              <SNIPPET>
                <NAME>circumference</NAME>
                <REQUIRES>pi</REQUIRES>
                <REQUIRES>radius</REQUIRES>
                <JAVASCRIPT>
const circumference = 2 * pi * radius;
                </JAVASCRIPT>
              </SNIPPET>
              <SNIPPET>
                <REQUIRES>circumference</REQUIRES>
                <JAVASCRIPT>
circumference;
                </JAVASCRIPT>
              </SNIPPET>

              <INDEX>means of abstraction<SUBINDEX><ORDER>var</ORDER><TT>var</TT></SUBINDEX></INDEX>
              Constant declaration is our language<APOS/>s
              simplest means of abstraction, for it allow us to use simple names to
              refer to the results of compound operations, such as the
              <JAVASCRIPTINLINE>circumference</JAVASCRIPTINLINE>
              computed above.  In general, computational objects may have very
              complex structures, and it would be extremely inconvenient to
              have to remember and repeat their details each time we want to use
              them. Indeed, complex programs are constructed by building, step
              by step, computational objects of increasing complexity.
              Our interpreter facilitates this step-by-step program construction
              because name-object associations can be created incrementally in
              successive interactions.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <TEXT>
              It should be clear that the possibility of associating values with
              names and later retrieving them means that the interpreter must
              maintain some sort of memory that keeps track of the name-object
              pairs.  This memory is called the
              <INDEX>environment</INDEX>
              <EM>environment</EM>
              (more precisely the
              <INDEX>global environment</INDEX>
              <EM>global environment</EM>, since we will see later that a
              computation may involve a number of different
              environments).<FOOTNOTE>Chapter<SPACE/>3 will show that this notion of
                environment is crucial, both for understanding how the interpreter
                works and for implementing interpreters.</FOOTNOTE>
            </TEXT>

      </SUBSECTION>
