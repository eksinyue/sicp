      <SUBSECTION>
        <NAME>Expressions</NAME>
        <LABEL NAME="sec:expressions"></LABEL>

        <SPLIT>
          <SCHEME>
            <TEXT>
              One easy way to get started at programming is to examine some typical
              interactions with an interpreter for the Scheme dialect of Lisp.
              Imagine that you are sitting at a computer terminal.  You type an
              <EM>expression</EM>, and the interpreter responds by displaying the result of
              its <EM>evaluating</EM> that expression.
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              One easy way to get started at programming in JavaScript is 
              to interact with the JavaScript interpreter that is built into
              the browser you are using to view this page.
              JavaScript programs are called <EM>statements</EM>.
              We have set up the statements shown with a dark background such that
              you can click on them.
              The mouse click on JavaScript statements is 
              programmed in such
              a way that a JavaScript interpreter is displayed, which can
	      <EM>evaluate</EM> the
              statement and display the resulting value.
              By the way, the program that makes the mouse click
              on a JavaScript statement display the interpreter is itself
              written in JavaScript; we call it the <EM>script</EM> for
              the mouse click.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              <INDEX>number(s)<SUBINDEX>in Lisp<ORDER>lisp</ORDER></SUBINDEX></INDEX>
              <INDEX>primitive expression<SUBINDEX>number</SUBINDEX></INDEX>
              One kind of primitive expression you might type is a number.  (More
              precisely, the expression that you type consists of the numerals that
              represent the number in base 10.)  If you present Lisp with
              a number
              <SNIPPET>
                <SCHEME>
486
                </SCHEME>
              </SNIPPET>
              the interpreter will respond by printing
              <FOOTNOTE>Throughout this book,
                <INDEX>notation in this book<SUBINDEX>slanted characters for interpreter response</SUBINDEX></INDEX>
                when we wish to emphasize the distinction between the input typed by
                the user and the response printed by the interpreter, we will show the
                latter in slanted characters.</FOOTNOTE>
              <SNIPPET EVAL="no">
                <SCHEME>
486
                </SCHEME>
                <SCHEMEOUTPUT>
486
                </SCHEMEOUTPUT>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              One kind of statement is an 
              expression statement, which consists of an
                <EM>expression</EM>, followed by a semicolon.
              A simple kind of an expression is a number.
              (More precisely, the expression consists of the numerals that
              represent the number in base 10.)  If you ask our script to 
              display the interpreter for the expression statement
              <SNIPPET>
                <JAVASCRIPT>
486;
                </JAVASCRIPT>  
              </SNIPPET>
              by clicking it, it will respond by creating a separate
	      browser tab where the statement is shown, with the option
              to evaluate the statement.
              Click on the primitive expression statement, and see what happens!
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              <INDEX>compound expression</INDEX>
              <INDEX>combination</INDEX>
              Expressions representing numbers may be combined with an 
              <INDEX>primitive expression<SUBINDEX>name of primitive procedure</SUBINDEX></INDEX>
              expression representing a
              <INDEX>arithmetic<SUBINDEX>primitive procedures for</SUBINDEX></INDEX>
              <CODEINDEX>+<EXPLANATION>primitive addition procedure</EXPLANATION></CODEINDEX>
              <!--
                  \ind*{primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[+@{\tt +}]
                  \ind*{primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[*@{\tt *}]
                -->
              <CODEINDEX>*<EXPLANATION>primitive multiplication procedure</EXPLANATION></CODEINDEX>
              primitive procedure (such as 
              <SCHEMEINLINE>+</SCHEMEINLINE> or <SCHEMEINLINE>*</SCHEMEINLINE>) to form a
              compound expression that represents the
              application of the procedure to those numbers.  For example,
              <SNIPPET>
                <SCHEME>
(+ 137 349)
                </SCHEME>
                <SCHEMEOUTPUT>
486
                </SCHEMEOUTPUT>
              </SNIPPET>

              <CODEINDEX>-<EXPLANATION>primitive subtraction procedure</EXPLANATION></CODEINDEX>
              <!--\ind*{primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[-@{\tt -}]
                -->

              <SNIPPET>
                <SCHEME>
(- 1000 334)
                </SCHEME>
                <SCHEMEOUTPUT>
666
                </SCHEMEOUTPUT>
              </SNIPPET>

              <SNIPPET>
                <SCHEME>
(* 5 99)
                </SCHEME>
                <SCHEMEOUTPUT>
495
                </SCHEMEOUTPUT>
              </SNIPPET>

              <!--
                  \ind*{primitive procedures (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[/@{\tt /}]
                -->

              <CODEINDEX>/<EXPLANATION>primitive division procedure</EXPLANATION></CODEINDEX>


              <SNIPPET>
                <SCHEME>
(/ 10 5)
                </SCHEME>
                <SCHEMEOUTPUT>
2
                </SCHEMEOUTPUT>
              </SNIPPET>


              <SNIPPET>
                <SCHEME>
(+ 2.7 10)
                </SCHEME>
                <SCHEMEOUTPUT>
12.7
                </SCHEMEOUTPUT>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              <INDEX>compound expression</INDEX>
              <INDEX>combination</INDEX>
              Expressions representing numbers may be combined with operators
              (such as 
              <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE> or 
              <JAVASCRIPTINLINE>*</JAVASCRIPTINLINE>) to form a
              compound expression that represents the
              application of a corresponding primitive
              function to those numbers.  For example, evaluate
              any of the following expression statements<FOOTNOTE>
              Note that the semicolon indicates to the JavaScript interpreter
              that the expression should be taken as a statement, and thus as
              a complete program. However, JavaScript systems are not strict
              about these semicolons; they can often be left out. In this book,
              we will never leave out these optional semicolons, and point out
              which statements come with semicolons and which ones don<APOS/>t.
              </FOOTNOTE>
              by clicking on it:
              <SNIPPET>
                <JAVASCRIPT>
137 + 349;
                </JAVASCRIPT>  
              </SNIPPET>
              <SNIPPET>
                <JAVASCRIPT>
1000 - 334;
                </JAVASCRIPT>  
              </SNIPPET>
              <SNIPPET>
                <JAVASCRIPT>
5 * 99;
                </JAVASCRIPT>  
              </SNIPPET>
              <SNIPPET>
                <JAVASCRIPT>
10 / 5;
                </JAVASCRIPT>  
              </SNIPPET>
              <SNIPPET>
                <JAVASCRIPT>
2.7 + 10;
                </JAVASCRIPT>  
              </SNIPPET>
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Expressions such as these, formed by 
              <INDEX>parentheses<SUBINDEX>delimiting combination</SUBINDEX></INDEX>
              delimiting a list of expressions
              within parentheses in order to denote
              <INDEX>procedure application<SUBINDEX>combination denoting</SUBINDEX></INDEX>
              procedure application,
              are called <EM>combinations</EM>.  The leftmost
              element in the list is called the 
              <INDEX>operator of a combination</INDEX>
              <EM>operator</EM>, and the other
              elements are called 
              <INDEX>operands of a combination</INDEX>
              <EM>operands</EM>.  The
              <INDEX>value<SUBINDEX><ORDER>combination</ORDER>of a combination</SUBINDEX></INDEX>
              value of a combination is
              obtained by applying the procedure specified by the operator to the
              <INDEX>argument(s)</INDEX>
              <EM>arguments</EM> that are the values of the operands.
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              Expressions such as these, which contain other expressions
              as components, are called <EM>combinations</EM>.
              <INDEX>combination</INDEX>
              Combinations that are formed by an 
              <INDEX>operator</INDEX>
              <EM>operator</EM> symbol in the middle, and
              <INDEX>operands</INDEX>
              <EM>operand</EM> expressions to the left and right of it, 
              are called 
              <EM>operator combinations</EM>.
              The value of an operator combination is
              obtained by applying the function specified by the operator to the
              <INDEX>argument(s)</INDEX>
              <EM>arguments</EM> that are the values of the operands.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              The convention of placing the operator to the left of the operands is
              known as 
              <INDEX>prefix notation</INDEX>
              <EM>prefix notation</EM>, and it may be somewhat confusing at
              first because it departs significantly from the customary mathematical
              convention.  Prefix notation has several advantages, however.  One of
              them is that it can accommodate 
              <INDEX>procedure<SUBINDEX>arbitrary number of arguments</SUBINDEX></INDEX>
              <INDEX>argument(s)<SUBINDEX>arbitrary number of</SUBINDEX></INDEX>
              procedures that may take an arbitrary
              number of arguments, as in the following examples:

              <SNIPPET>
                <SCHEME>
(+ 21 35 12 7)
                </SCHEME>
                <SCHEMEOUTPUT>
75
                </SCHEMEOUTPUT>
              </SNIPPET>

              <SNIPPET>
                <SCHEME>
(* 25 4 12)
                </SCHEME>
                <SCHEMEOUTPUT>
1200
                </SCHEMEOUTPUT>
              </SNIPPET>

              No ambiguity can arise, because the operator is always the leftmost 
              element and the entire combination is delimited by the
              parentheses.
            </TEXT>
            <TEXT>
              <INDEX>nested combinations</INDEX>
              A second advantage of prefix notation is that it extends in a
              straightforward way to allow combinations to be <EM>nested</EM>, 
              that is,
              to have combinations whose elements are themselves
              combinations:

              <SNIPPET>
                <SCHEME>
(+ (* 3 5) (- 10 6))
                </SCHEME>
                <SCHEMEOUTPUT>
19
                </SCHEMEOUTPUT>
              </SNIPPET>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              The convention of placing the operator between the operands is
              known as 
              <INDEX>infix notation</INDEX>
              <EM>infix notation</EM>. 
              It follows 
              the mathematical notation that the reader is most
              likely familiar with from school and everyday life.  
              As in mathematics, operator combinations can
              be <EM>nested</EM>, that is, they
              can take arguments that themselves are operator combinations:
              <SNIPPET>
                <JAVASCRIPT>
(3 * 5) + (10 - 6);
                </JAVASCRIPT>
              </SNIPPET>
              As usual, parentheses are used to group operator combinations
              in order to avoid ambiguities. JavaScript also follows the usual
              conventions when parentheses are omitted; 
              multiplication and division
              bind stronger than 
              addition and subtraction.
              For example,
              <SNIPPET>
                <JAVASCRIPT>
3 * 5 + 10 / 2;
                </JAVASCRIPT>
              </SNIPPET>
              stands for 
              <SNIPPET>
                <JAVASCRIPT>
(3 * 5) + (10 / 2);
                </JAVASCRIPT>
              </SNIPPET>
              We say that <JAVASCRIPTINLINE>*</JAVASCRIPTINLINE>
              and <JAVASCRIPTINLINE>/</JAVASCRIPTINLINE>
              have <EM>higher precedence</EM> than
              <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>
              and <JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>.
              Sequences of 
              additions and subtractions are read from left to right, as are
              sequences of multiplications and divisions. Thus,
              <SNIPPET>
                <JAVASCRIPT>
3 / 5 * 2 - 4 + 3;
                </JAVASCRIPT>
              </SNIPPET>
              stands for 
              <SNIPPET>
                <JAVASCRIPT>
(((3 / 5) * 2) - 4) + 3;
                </JAVASCRIPT>
              </SNIPPET>
              We say that the operators
              <JAVASCRIPTINLINE>+</JAVASCRIPTINLINE>,
              <JAVASCRIPTINLINE>-</JAVASCRIPTINLINE>,
              <JAVASCRIPTINLINE>*</JAVASCRIPTINLINE> and
              <JAVASCRIPTINLINE>/</JAVASCRIPTINLINE> are 
              left-associative.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              There is no limit (in principle) to the depth of such nesting and to
              the overall complexity of the expressions that the Lisp interpreter
              can evaluate.
              It is we humans who get confused by still relatively
              simple expressions such as

              <SNIPPET>
                <SCHEME>
(+ (* 3 (+ (* 2 4) (+ 3 5))) (+ (- 10 7) 6))
                </SCHEME>
              </SNIPPET>

              which the interpreter would readily evaluate to be 57.  We can help
              ourselves by writing such an expression in the form

              <SNIPPET>
                <SCHEME>
(+ (* 3
      (+ (* 2 4)
         (+ 3 5)))
   (+ (- 10 7)
      6))
                </SCHEME>
              </SNIPPET>

              following a formatting convention known as  
              <INDEX>pretty-printing</INDEX>
              <EM>pretty-printing</EM>, in
              which each long combination is written so that the operands are
              aligned vertically.  The resulting indentations display clearly the
              structure of the expression.<FOOTNOTE>Lisp systems typically provide
                <INDEX>formatting input expressions</INDEX>
                <INDEX>typing input expressions</INDEX>
                features to aid the user in formatting expressions.  Two especially
                useful features are one that automatically indents to the proper
                pretty-print position whenever a new line is started and one that
                highlights the matching left parenthesis whenever a right parenthesis
                is typed.</FOOTNOTE>
              <INDEX>nested combinations</INDEX>
              <INDEX>combination</INDEX>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              There is no limit (in principle) to the depth of such nesting and to
              the overall complexity of the expressions that the JavaScript interpreter
              can evaluate.
              It is we humans who might get confused by still relatively
              simple expressions such as

              <SNIPPET>
                <JAVASCRIPT>
3 * 2 * (4 + (3 - 5)) + 10 * (27 / 6);
                </JAVASCRIPT>
              </SNIPPET>

              which the interpreter would readily evaluate to be 57.  We can help
              ourselves by writing such an expression in the form

              <SNIPPET>
                <JAVASCRIPT>
3 * 2 * (4 + (3 - 5)) 
+ 
10 * (27 / 6);
                </JAVASCRIPT>
              </SNIPPET>
              to visually separate the major components of the expression.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>

        <SPLIT>
          <SCHEME>
            <TEXT>
              Even with complex expressions, the interpreter always operates in the
              same basic cycle: It reads an expression from the terminal, 
              evaluates the expression, and prints the result.
              This mode of operation is often expressed by saying that the
              interpreter runs in a 
              <INDEX>read-eval-print loop</INDEX>
              <INDEX>interpreter<SUBINDEX>read-eval-print loop</SUBINDEX></INDEX>
              <EM>read-eval-print loop</EM>.
              Observe in particular that it is not necessary to explicitly
              instruct the interpreter to print the value of the 
              expression.<FOOTNOTE>Lisp obeys the convention that every
                <INDEX>Perlis, Alan J.<SUBINDEX>quips</SUBINDEX></INDEX>
                <INDEX>Wilde, Oscar (Perlis<APOS/>s paraphrase of)</INDEX>
                <INDEX>value<SUBINDEX><ORDER>expression</ORDER>of an expression</SUBINDEX></INDEX>
                <INDEX>Lisp<SUBINDEX>efficiency of</SUBINDEX></INDEX>

                expression has a value. This convention, together with the old
                reputation of Lisp as an inefficient language, is the source of the
                quip by Alan Perlis (paraphrasing Oscar Wilde)
                that <QUOTE>Lisp programmers know the value of
                  everything but the cost of nothing.</QUOTE></FOOTNOTE>
            </TEXT>
          </SCHEME>
          <JAVASCRIPT>
            <TEXT>
              The interpreter always operates in the
              same basic cycle: It reads a statement from the browser, 
              evaluates the statement, and prints the result.
              This mode of operation is often expressed by saying that the
              interpreter runs in a 
              <INDEX>read-eval-print loop</INDEX>
              <INDEX>interpreter<SUBINDEX>read-eval-print loop</SUBINDEX></INDEX>
              <EM>read-eval-print loop</EM>.
              Observe in particular that it is not necessary to explicitly
              instruct the interpreter to print the value of the 
              statement.
            </TEXT>
          </JAVASCRIPT>
        </SPLIT>


      </SUBSECTION>
