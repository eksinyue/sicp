    <SUBSECTION>
      <NAME>
        Representing Queues
      </NAME>

      <LABEL NAME="sec:queues"/>
      <INDEX>queue|(</INDEX>

      <TEXT>
        The mutators <SPLITINLINE><SCHEME><SCHEMEINLINE>set-car!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>set-cdr!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>set_tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> enable us to use
        pairs to construct data structures that cannot be built with <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> alone.  This section shows how to use
        pairs to represent a data structure called a queue.  Section<SPACE/><REF NAME="sec:tables"/>
        will show how to represent data structures called tables.
      </TEXT>

      <TEXT>
        A <EM>queue</EM> is a sequence in which items are inserted at one end
        (called the
        <INDEX>queue<SUBINDEX>rear of</SUBINDEX></INDEX>
        <EM>rear</EM> of the queue) and deleted from the other end
        (the
        <INDEX>queue<SUBINDEX>front of</SUBINDEX></INDEX>
        <EM>front</EM>).  Figure<SPACE/><REF NAME="fig:queue-ops"/> shows an initially empty
        queue in which the items <SCHEMEINLINE>a</SCHEMEINLINE> and <SCHEMEINLINE>b</SCHEMEINLINE> are inserted.  Then <SCHEMEINLINE>a</SCHEMEINLINE> is removed, <SCHEMEINLINE>c</SCHEMEINLINE> and <SCHEMEINLINE>d</SCHEMEINLINE> are inserted, and <SCHEMEINLINE>b</SCHEMEINLINE> is
        removed.  Because items are always removed in the order in which they
        are inserted, a queue is sometimes called a
        <INDEX>FIFO buffer</INDEX>
        <EM>FIFO</EM> (first in,
        first out) buffer.

  <SPLIT>
    <SCHEME>
      <FIGURE>
        <FIGURE src="img_original/ch3.18.svg"></FIGURE>
        <CAPTION>Queue operations.</CAPTION>
        <LABEL NAME="fig:queue-ops"/>
      </FIGURE>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE>
        <FIGURE src="img_javascript/ch3.18.svg"></FIGURE>
        <CAPTION>Queue operations.</CAPTION>
        <LABEL NAME="fig:queue-ops"/>
      </FIGURE>
    </JAVASCRIPT>
  </SPLIT>
      </TEXT>

      <TEXT>
        <INDEX>data abstraction<SUBINDEX>for queue</SUBINDEX></INDEX>
        <INDEX>queue<SUBINDEX>operations on</SUBINDEX></INDEX>
        In terms of data abstraction, we can regard a queue as defined by the
        following set of operations:
        <UL>
          <LI>a constructor:
            <P>
              <!--  \indcode{make-queue} -->
              <SPLITINLINE><SCHEME><SCHEMEINLINE>(make-queue)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_queue()</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              returns an empty queue (a queue containing no items).
            </P>
          </LI>
          <LI>
            two selectors:
            <P>
              <!--  \indcode{empty-queue?} -->
              <SPLITINLINE><SCHEME><SCHEMEINLINE>(empty-queue? queue)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>empty_queue(queue)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              tests if the queue is empty.
            </P>
            <P>
              <!--  \indcode{front-queue} -->
              <SPLITINLINE><SCHEME><SCHEMEINLINE>(front-queue ^queue^)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>front_queue(queue)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              returns the object at the front of
              the queue, signaling an error if the queue is empty; it does not
              modify the queue.
            </P>
          </LI>
          <LI>
            two mutators:
            <P>
              <!--  \indcode{insert-queue!} -->
              <SPLITINLINE><SCHEME><SCHEMEINLINE>(insert-queue! ^queue^ ^item^)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>insert_queue(queue, item)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              inserts the item at the rear of the queue and returns the modified
              queue as its value.
            </P>
            <P>
              <!--  \indcode{delete-queue!} -->
              <SPLITINLINE><SCHEME><SCHEMEINLINE>(delete-queue! ^queue^)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>delete_queue(queue)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
              removes the item at the
              front of the queue and returns the modified queue as its value,
              signaling an error if the queue is empty before the deletion.
            </P>
          </LI>
        </UL>
      </TEXT>

      <TEXT>
        Because a queue is a sequence of items, we could certainly represent
        it as an ordinary list; the front of the queue would be the <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        of the list, inserting an item in the queue would amount to appending
        a new element at the end of the list, and deleting an item from the
        queue would just be taking the <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the list.  However, this
        representation is inefficient, because in order to insert an item we
        must scan the list until we reach the end.  Since the only method we
        have for scanning a list is by successive <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> operations, this
        scanning requires <LATEXINLINE>$\Theta(n)$</LATEXINLINE> steps for a list of <LATEXINLINE>$n$</LATEXINLINE> items.  A simple
        modification to the list representation overcomes this disadvantage by
        allowing the queue operations to be implemented so that they require
        <LATEXINLINE>$\Theta(1)$</LATEXINLINE> steps; that is, so that the number of steps
        needed is independent of the length of the queue.
      </TEXT>

      <TEXT>
        The difficulty with the list representation arises from the need to
        scan to find the end of the list.  The reason we need to scan is that,
        although the standard way of representing a list as a chain of pairs
        readily provides us with a pointer to the beginning of the list, it
        gives us no easily accessible pointer to the end.  The modification
        that avoids the drawback is to represent the queue as a list, together
        with an additional pointer that indicates the final pair in the list.
        That way, when we go to insert an item, we can consult the rear
        pointer and so avoid scanning the list.
      </TEXT>

      <TEXT>
        A queue is represented, then, as a pair of pointers,
<SPLITINLINE><SCHEME><SCHEMEINLINE>front-ptr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>front_ptr</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        and
<SPLITINLINE><SCHEME><SCHEMEINLINE>reqr-ptr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>rear_ptr</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
which indicate, respectively, the first and last
        pairs in an ordinary list.  Since we would like the queue to be an
        identifiable object, we can use <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> to combine the two
        pointers.  Thus, the queue itself will be the <SPLITINLINE><SCHEME><SCHEMEINLINE>cons</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>pair</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> of the two
        pointers.  Figure<SPACE/><REF NAME="fig:queue-pointers"/> illustrates this
        representation.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-19.svg"></FIGURE>
              <CAPTION>Implementation of a queue as a list with front and rear pointers.</CAPTION>
              <LABEL NAME="fig:queue-pointers"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-19.svg"></FIGURE>
              <CAPTION>Implementation of a queue as a list with front and rear pointers.</CAPTION>
              <LABEL NAME="fig:queue-pointers"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
      </TEXT>

      <TEXT>
        To define the queue operations we use the following
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>, which
        enable us to select and to modify the front and rear pointers of a
        queue:

        <SNIPPET EVAL="yes">
          <NAME>modify_pointers</NAME>
          <SCHEME>
            <!--  \indcode*{front-ptr} -->
            (define (front-ptr queue) (car queue))

            <!--  \indcode*{rear-ptr} -->
            (define (rear-ptr queue) (cdr queue))

            <!--  \indcode*{set-front-ptr!} -->
            (define (set-front-ptr! queue item) (set-car! queue item))

            <!--  \indcode*{set-rear-ptr!} -->
            (define (set-rear-ptr! queue item) (set-cdr! queue item))
          </SCHEME>
    <JAVASCRIPT>
function front_ptr(queue) {
    return head(queue);
}
function rear_ptr(queue) {
    return tail(queue);
}
function set_front_ptr(queue, item) {
    set_head(queue, item);
}
function set_rear_ptr(queue, item) {
    set_tail(queue, item);
}
          </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
        Now we can implement the actual queue operations.  We will consider a
        queue to be empty if its front pointer is the empty list:

        <SNIPPET EVAL="yes">
          <REQUIRES>modify_pointers</REQUIRES>
          <NAME>is_empty_queue</NAME>
          <SCHEME>
            <!--  \indcode*{empty-queue?} -->
            (define (empty-queue? queue) (null? (front-ptr queue)))
          </SCHEME>
    <JAVASCRIPT>
function is_empty_queue(queue) {
    return is_null(front_ptr(queue));
}
          </JAVASCRIPT>
</SNIPPET>
      </TEXT>

      <TEXT>
        The <SPLITINLINE><SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  constructor returns, as an initially empty queue,
        a pair whose <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> are both the empty list:

        <SNIPPET EVAL="yes">
          <NAME>make_queue</NAME>
          <SCHEME>
            <!--  \indcode*{make-queue} -->
            (define (make-queue) (cons '() '()))
          </SCHEME>
    <JAVASCRIPT>
function make_queue() {
    return pair(null, null);
}
          </JAVASCRIPT>
</SNIPPET>
      </TEXT>

      <TEXT>
        To select the item at the front of the queue, we return the <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        of the pair indicated by the front pointer:

        <SNIPPET EVAL="yes">
          <REQUIRES>is_empty_queue</REQUIRES>
          <NAME>front_queue</NAME>
          <SCHEME>
            <!--  \indcode*{front-queue} -->
            (define (front-queue queue)
            (if (empty-queue? queue)
            (error "FRONT called with an empty queue" queue)
            (car (front-ptr queue))))
          </SCHEME>
    <JAVASCRIPT>
function front_queue(queue) {
    return is_empty_queue(queue)
        ? error(queue, "front_queue called with an empty queue:")
        : front_ptr(queue);
}
    </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <TEXT>
        To insert an item in a queue, we follow the method whose result is
        indicated in Figure<SPACE/><REF NAME="fig:queue-insert"/>.  We first create a new
        pair whose <SPLITINLINE><SCHEME><SCHEMEINLINE>car</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>head</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is the item to be inserted and whose <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is
        the empty list.  If the queue was initially empty, we set the front and
        rear pointers of the queue to this new pair.  Otherwise, we modify the
        final pair in the queue to point to the new pair, and also set the
        rear pointer to the new pair.

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-20.svg"></FIGURE>
              <CAPTION>Result of using <SCHEMEINLINE>(insert-queue! q 'd)</SCHEMEINLINE> on the queue of Figure<SPACE/><REF NAME="fig:queue-pointers"/>. </CAPTION>
              <LABEL NAME="fig:queue-insert"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-20.svg"></FIGURE>
              <CAPTION>Result of using <JAVASCRIPTINLINE>insert_queue(q, 'd')</JAVASCRIPTINLINE> on the queue of Figure<SPACE/><REF NAME="fig:queue-pointers"/>. </CAPTION>
              <LABEL NAME="fig:queue-insert"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>

        <SNIPPET EVAL="yes">
          <REQUIRES>is_empty_queue</REQUIRES>
          <REQUIRES>modify_pointers</REQUIRES>
          <NAME>insert_queue</NAME>
          <SCHEME>
            <!--  \indcode*{insert-queue!} -->
            (define (insert-queue! queue item)
            (let ((new-pair (cons item '())))
            (cond ((empty-queue? queue)
            (set-front-ptr! queue new-pair)
            (set-rear-ptr! queue new-pair)
            queue)
            (else
            (set-cdr! (rear-ptr queue) new-pair)
            (set-rear-ptr! queue new-pair)
            queue))))
          </SCHEME>
    <JAVASCRIPT>
function insert_queue(queue, item) {
    const new_pair = pair(item, null);
    if (is_empty_queue(queue)) {
        set_front_ptr(queue, new_pair);
        set_rear_ptr(queue, new_pair);
    } else {
        set_tail(rear_ptr(queue), new_pair);
        set_rear_ptr(queue, new_pair);
    }
    return queue;
}
          </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
        To delete the item at the front of the queue, we merely modify the
        front pointer so that it now points at the second item in the queue,
        which can be found by following the <SPLITINLINE><SCHEME><SCHEMEINLINE>cdr</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>tail</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> pointer of the first
        item (see Figure<SPACE/><REF NAME="fig:queue-delete"/>):<FOOTNOTE>If the first item is
          the final item in the queue, the front pointer will be the empty list after
          the deletion, which will mark the queue as empty; we needn<APOS/>t worry
          about updating the rear pointer, which will still point to the deleted
          item, because <SCHEMEINLINE>empty-queue?</SCHEMEINLINE> looks only at the front pointer.</FOOTNOTE>

        <SPLIT>
          <SCHEME>
            <FIGURE>
              <FIGURE src="img_original/ch3-Z-G-21.svg"></FIGURE>
              <CAPTION>Result of using <SCHEMEINLINE>(delete-queue! q)</SCHEMEINLINE> on the queue of Figure<SPACE/><REF NAME="fig:queue-insert"/>. </CAPTION>
              <LABEL NAME="fig:queue-delete"/>
            </FIGURE>
          </SCHEME>
          <JAVASCRIPT>
            <FIGURE>
              <FIGURE src="img_javascript/ch3-Z-G-21.svg"></FIGURE>
              <CAPTION>Result of using <JAVASCRIPTINLINE>delete_queue(q)</JAVASCRIPTINLINE> on the queue of Figure<SPACE/><REF NAME="fig:queue-insert"/>. </CAPTION>
              <LABEL NAME="fig:queue-delete"/>
            </FIGURE>
          </JAVASCRIPT>
        </SPLIT>
          
        <SNIPPET EVAL="yes">
          <REQUIRES>is_empty_queue</REQUIRES>
          <REQUIRES>modify_pointers</REQUIRES>
          <NAME>delete_queue</NAME>
          <SCHEME>
            <!--  \indcode*{delete-queue!} -->
            (define (delete-queue! queue)
            (cond ((empty-queue? queue)
            (error "DELETE! called with an empty queue" queue))
            (else
            (set-front-ptr! queue (cdr (front-ptr queue)))
            queue)))
          </SCHEME>
    <JAVASCRIPT>
function delete_queue(queue) {
    if (is_empty_queue(queue)) {
        error(queue, "delete_queue called with an empty queue:");
    } else {
        set_front_ptr(queue, tail(front_ptr(queue)));
        return queue;
    }
}
    </JAVASCRIPT>
        </SNIPPET>
      </TEXT>

      <EXERCISE>
        Ben Bitdiddle decides to test the queue implementation described
        above.  He types in the
        <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
        to the <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> interpreter and
        proceeds to try them out:

        <SNIPPET EVAL="yes">
          <REQUIRES>make_queue</REQUIRES>
          <NAME>make_queue_example1</NAME>
          <SCHEME>
            (define q1 (make-queue))
          </SCHEME>
    <JAVASCRIPT>
const q1 = make_queue();
    </JAVASCRIPT>
        </SNIPPET>

        <SNIPPET EVAL="yes">
          <REQUIRES>insert_queue</REQUIRES>
          <REQUIRES>make_queue_example1</REQUIRES>
          <NAME>insert_queue_example1</NAME>
          <SCHEME>
            (insert-queue! q1 'a)
          </SCHEME>
    <JAVASCRIPT>
insert_queue(q1, "a");
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            ((a) a)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET EVAL="yes">
          <REQUIRES>insert_queue_example1</REQUIRES>
          <NAME>insert_queue_example2</NAME>
          <SCHEME>
            (insert-queue! q1 'b)
          </SCHEME>
    <JAVASCRIPT>
insert_queue(q1, "b");
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            ((a b) b)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET EVAL="yes">
          <REQUIRES>insert_queue_example2</REQUIRES>
          <REQUIRES>delete_queue</REQUIRES>
          <NAME>delete_queue_example1</NAME>
          <SCHEME>
            (delete-queue! q1)
          </SCHEME>
    <JAVASCRIPT>
delete_queue(q1);
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            ((b) b)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <SNIPPET EVAL="yes">
          <REQUIRES>delete_queue_example1</REQUIRES>
          <NAME>delete_queue_example2</NAME>
          <SCHEME>
            (delete-queue! q1)
          </SCHEME>
    <JAVASCRIPT>
delete_queue(q1);
    </JAVASCRIPT>
          <SCHEMEOUTPUT>
            (() b)
          </SCHEMEOUTPUT>
        </SNIPPET>

        <QUOTE>It<APOS/>s all wrong!</QUOTE> he complains.  <QUOTE>The interpreter<APOS/>s response shows
          that the last item is inserted into the queue twice.  And when I
          delete both items, the second <SCHEMEINLINE>b</SCHEMEINLINE> is still there, so the queue
          isn<APOS/>t empty, even though it<APOS/>s supposed to be.</QUOTE>  Eva Lu Ator suggests
        that Ben has misunderstood what is happening.  <QUOTE>It<APOS/>s not that the
          items are going into the queue twice,</QUOTE> she explains.  <QUOTE>It<APOS/>s just
          that the standard <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> printer doesn<APOS/>t know how to make sense of the
          queue representation.  If you want to see the queue printed correctly,
          you<APOS/>ll have to define your own print
          <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
          for queues.</QUOTE> Explain
        what Eva Lu is talking about.  In particular, show why Ben<APOS/>s examples
        produce the printed results that they do.  Define a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        <!--  \indcode{print-queue} -->
  <SPLITINLINE><SCHEME><SCHEMEINLINE>print-queue</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>print_queue</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
that takes a queue as input and prints the sequence of
items in the queue.

<SOLUTION>
<SNIPPET HIDE="yes" PAGE="265">
  <NAME>print_queue_example</NAME>
  <SCHEME>
  </SCHEME>
  <JAVASCRIPT>
const q1  = make_queue();
insert_queue(q1, "a");    
insert_queue(q1, "b");    
delete_queue(q1);
delete_queue(q1);
  </JAVASCRIPT>
        </SNIPPET>
  
	<SNIPPET>
	  <NAME>print_queue_solution</NAME>
	  <REQUIRES>make_queue</REQUIRES>
	  
	  <EXAMPLE>last_pair_example</EXAMPLE>
    <JAVASCRIPT>
function last_pair(items) {
    return is_null(tail(items))
           ? items
           : last_pair(tail(items));
}
    </JAVASCRIPT>
    <SCHEME>
    </SCHEME>
    </SNIPPET>
  </SOLUTION>

      </EXERCISE>

      <EXERCISE>
        <INDEX>queue<SUBINDEX>procedural implementation of</SUBINDEX></INDEX>
        Instead of representing a queue as a pair of pointers, we can build a
        queue as a
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        with local state.  The local state will consist
        of pointers to the beginning and the end of an ordinary list.  Thus,
        the
<SPLITINLINE><SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
        <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
        will have the form

        <SNIPPET EVAL="no">
          <SCHEME>
            (define (make-queue)
            (let ((front-ptr ^$\ldots$^ )
            (rear-ptr ^$\ldots$^ ))
            ^definitions of internal procedures^
            (define (dispatch m) ^$\ldots$^)
            dispatch))
          </SCHEME>
    <JAVASCRIPT>
function make_queue() {
    function front_ptr(...) ...
    function rear_ptr(...) ...
    //definitions of internal functions
    function dispatch(m) ...
    return dispatch;
}
          </JAVASCRIPT>
</SNIPPET>

        Complete the definition of
<SPLITINLINE><SCHEME><SCHEMEINLINE>make-queue</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_queue</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
and provide
        implementations of the queue operations using this representation.
      </EXERCISE>


      <EXERCISE>
        <INDEX>queue<SUBINDEX>double-ended</SUBINDEX></INDEX>
        <INDEX>deque</INDEX>
        A <EM>deque</EM> (<QUOTE>double-ended queue</QUOTE>) is a sequence in which items
        can be inserted and deleted at either the front or the rear.
        Operations on deques are the constructor
<SPLITINLINE><SCHEME><SCHEMEINLINE>make-deque</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
the predicate
<SPLITINLINE><SCHEME><SCHEMEINLINE>empty-deque</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>is_empty_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
selectors
<SPLITINLINE><SCHEME><SCHEMEINLINE>front-deque</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>front_deque</JAVASCRIPTINLINE></JAVASCRIPT>
</SPLITINLINE><SCHEMEINLINE>front-deque</SCHEMEINLINE>
and
<SPLITINLINE><SCHEME><SCHEMEINLINE>rear-deque</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>rear_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
and mutators
<SPLITINLINE><SCHEME><SCHEMEINLINE>front-insert-deque!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>front_insert_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
<SPLITINLINE><SCHEME><SCHEMEINLINE>front-delete-deque!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>front_delete_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>,
<SPLITINLINE><SCHEME><SCHEMEINLINE>rear-insert-deque!</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>rear_insert_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, and
<SPLITINLINE><SCHEME><SCHEMEINLINE>rear-delete-deque</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>rear_delete_deque</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.
Show how to represent deques using pairs, and
        give implementations of the operations.<FOOTNOTE>Be careful not to
          make the interpreter try to print a structure that contains cycles.
          (See exercise<SPACE/><REF NAME="ex:make-cycle"/>.)</FOOTNOTE>
        All operations should be accomplished in <LATEXINLINE>$\Theta(1)$</LATEXINLINE> steps.
        <LABEL NAME="ex:deque"/>
      </EXERCISE>
      <INDEX>queue|)</INDEX>

    </SUBSECTION>
