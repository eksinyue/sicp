<SUBSECTION>
  <NAME>
    Running the Evaluator as a Program
  </NAME>

  <LABEL NAME="sec:running-eval"/>
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>running|(</SUBINDEX></INDEX>
  <TEXT>
    Given the evaluator, we have in our hands a description
    (expressed in <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>) of the process
    by which <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> expressions are evaluated.  One advantage of expressing the
    evaluator as a program is that we can run the program.  This gives us,
    running within <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>, a working model of how <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> itself evaluates
    expressions.  This can serve as a framework for experimenting with
    evaluation rules, as we shall do later in this chapter.
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>primitive procedures|(</SUBINDEX></INDEX>
      </SCHEME>
      <JAVASCRIPT>
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX>primitive functions|(</SUBINDEX></INDEX>
      </JAVASCRIPT>
    </SPLITINLINE>
    Our evaluator program reduces expressions ultimately to the
    application of primitive
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
    Therefore, all that we need to
    run the evaluator is to create a mechanism that calls on the underlying
    <SPLITINLINE>
      <SCHEME>Lisp</SCHEME>
      <JAVASCRIPT>JavaScript</JAVASCRIPT>
    </SPLITINLINE>
    system to model the application of primitive
    <SPLITINLINE>
      <SCHEME>procedures.</SCHEME>
      <JAVASCRIPT>functions.</JAVASCRIPT>
    </SPLITINLINE>
  </TEXT>

  <TEXT>
    There must be a binding for each primitive
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    name, so that when
    <SPLITINLINE><SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    evaluates the operator of an application of a primitive,
    it will find an object to pass to <SCHEMEINLINE>apply</SCHEMEINLINE>.  We thus set up a 
    <INDEX>metacircular evaluator for Scheme<SUBINDEX>global environment</SUBINDEX></INDEX>
    <INDEX>global environment<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
    global
    environment that associates unique objects with the names of the primitive
    <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    that can appear in the expressions we will be evaluating.  
    <SPLIT>
      <SCHEME>
	The global environment also includes bindings for the symbols 
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>true and false@<SCHEMEINLINE>true</SCHEMEINLINE> and <SCHEMEINLINE>false</SCHEMEINLINE></SUBINDEX></INDEX>
	<SCHEMEINLINE>true</SCHEMEINLINE> and
	<SCHEMEINLINE>false</SCHEMEINLINE>, so that they can be used as variables in expressions
	to be evaluated.
      </SCHEME>
      <JAVASCRIPT>
	The global environment also includes bindings for the symbols
	<INDEX>metacircular evaluator for JavaScript<SUBINDEX>undefined@<SCHEMEINLINE>undefined</SCHEMEINLINE></SUBINDEX></INDEX>
	<JAVASCRIPTINLINE>undefined</JAVASCRIPTINLINE>,
	<JAVASCRIPTINLINE>NaN</JAVASCRIPTINLINE> and
	<JAVASCRIPTINLINE>Infinity</JAVASCRIPTINLINE>,
	so that they can be used as constants
	in expressions to be evaluated.
      </JAVASCRIPT>
    </SPLIT>

    <SNIPPET PAGE="365" HIDE="yes" EVAL="no">
      <NAME>headline_4_1_4</NAME>
      <JAVASCRIPT>
	// functions from chapter 4, section 1.4

      </JAVASCRIPT>
    </SNIPPET>
    
    <SNIPPET PAGE="381">
      <NAME>setup_environment</NAME>
      <EXAMPLE>setup_environment_example</EXAMPLE>
      <SCHEME>
(define (setup-environment)
  (let ((initial-env
         (extend-environment (primitive-procedure-names)
                             (primitive-procedure-objects)
                             the-empty-environment)))
    (define-variable! \&apos;true true initial-env)
    (define-variable! \&apos;false false initial-env)
    initial-env))
      </SCHEME>
      <JAVASCRIPT>
function setup_environment() {
    const primitive_function_names =
        map(f => head(f), primitive_functions);
    const primitive_function_values =
        map(f => make_primitive_function(head(tail(f))),
            primitive_functions);
    const primitive_constant_names =
        map(f => head(f), primitive_constants);
    const primitive_constant_values =
        map(f => head(tail(f)),
            primitive_constants);
    return extend_environment(
               append(primitive_function_names, 
                      primitive_constant_names),
               append(primitive_function_values, 
                      primitive_constant_values),
               the_empty_environment);
}
      </JAVASCRIPT>
    </SNIPPET>

    <SNIPPET PAGE="381" HIDE="yes">
      <NAME>the_global_environment</NAME>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
      </JAVASCRIPT>
    </SNIPPET>
    
    <SNIPPET PAGE="381" HIDE="yes">
      <NAME>setup_environment_example</NAME>
      <REQUIRES>tagged_list</REQUIRES>
      <REQUIRES>extend_environment</REQUIRES>
      <REQUIRES>enclosing_environment</REQUIRES>
      <REQUIRES>make_frame</REQUIRES>
      <REQUIRES>primitive_constants</REQUIRES>
      <REQUIRES>primitive_procedures</REQUIRES>
      <REQUIRES>primitive_procedure</REQUIRES>
      <JAVASCRIPT>
const the_global_environment = setup_environment();
	
the_global_environment;
      </JAVASCRIPT>
    </SNIPPET>
    
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	It does not matter how we represent the 
	primitive procedure
	objects,
	so long as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and apply them by using the
	procedures <SCHEMEINLINE>primitive-procedure?</SCHEMEINLINE>
	and
	<SCHEMEINLINE>apply-primitive-procedure</SCHEMEINLINE>.
	We have chosen to represent a 
	primitive procedure
	as a list beginning with the symbol <SCHEMEINLINE>primitive</SCHEMEINLINE> and
	containing a
	procedure
	in the underlying Lisp that implements that primitive.
	<SNIPPET PAGE="382">
	  <NAME>primitive_procedure</NAME>
	  <SCHEME>
(define (primitive-procedure? proc)
  (tagged-list? proc \&apos;primitive))

(define (primitive-implementation proc) (cadr proc))
	  </SCHEME>
	</SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
	It does not matter how we represent primitive functions,
	so long as <SCHEMEINLINE>apply</SCHEMEINLINE> can identify and
	apply them using the functions
	<JAVASCRIPTINLINE>is_primitive_function</JAVASCRIPTINLINE> and 
	<JAVASCRIPTINLINE>apply_primitive_function</JAVASCRIPTINLINE>.  We have chosen to
	represent a primitive function
	as a list beginning with the string <JAVASCRIPTINLINE>"primitive"</JAVASCRIPTINLINE> and
	containing a function
	in the underlying JavaScript that implements that primitive.

	<SNIPPET PAGE="382">
	  <NAME>primitive_procedure</NAME>
	  <REQUIRES>tagged_list</REQUIRES>
	  <EXAMPLE>primitive_procedure_example</EXAMPLE>
	  <JAVASCRIPT>
function make_primitive_function(impl) {
    return list("primitive", impl);
}
function is_primitive_function(fun) {
   return is_tagged_list(fun, "primitive");
}
function primitive_implementation(fun) {
   return list_ref(fun, 1);
}
	  </JAVASCRIPT>
	</SNIPPET>

	<SNIPPET PAGE="382" HIDE="yes">
	  <NAME>primitive_procedure_example</NAME>
	  <JAVASCRIPT>
const my_primitive_plus =
    make_primitive_function( (x, y) => x + y );	    
display(is_primitive_function(my_primitive_plus));
display(primitive_implementation(my_primitive_plus));
	  </JAVASCRIPT>
	</SNIPPET>
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>Setup-environment</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT>The function <JAVASCRIPTINLINE>setup_environment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    will get the primitive 
    <SPLITINLINE>
      <SCHEME>names and implementation procedures</SCHEME>
      <JAVASCRIPT>names and implementation functions</JAVASCRIPT>
    </SPLITINLINE>
    from a list:<FOOTNOTE>Any
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    defined in the underlying
    <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
    can be used as a primitive for the metacircular evaluator.  The name of a primitive
    installed in the evaluator need not be the same as the name
    of its implementation in the underlying
    <SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>;
    the names are the same here because the metacircular evaluator implements
    <SPLITINLINE><SCHEME>Scheme</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>    
    itself.
    Thus, for example, we could put 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(list 'first car)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list("first", head)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> 
    or 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(list 'square (lambda (x) (* x x)))</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>list("square", x => x * x)</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
    in the list of 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>primitive-procedures</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>primitive_functions</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>.</FOOTNOTE>

    <SNIPPET PAGE="382">
      <NAME>primitive_procedures</NAME>
      <EXAMPLE>primitive_procedures_example</EXAMPLE>
      <SCHEME>
(define primitive-procedures
  (list (list \&apos;car car)
        (list \&apos;cdr cdr)
        (list \&apos;cons cons)
        (list \&apos;null? null?)
        (list \&apos;display display)
        (list \&apos;read read)
        (list \&apos;+ +)
        (list \&apos;- -)
        (list \&apos;* *)
;;      more primitives
        ))

(define (primitive-procedure-names)
  (map car
       primitive-procedures))

(define (primitive-procedure-objects)
  (map (lambda (proc) (list \&apos;primitive (cadr proc)))
       primitive-procedures))
      </SCHEME>
      <JAVASCRIPT>
const primitive_functions = list(
       list("display",       display          ),
       list("error",         error            ),
       list("+",             (x, y) =&gt; x + y  ),
       list("-",             (x, y) =&gt; x - y  ),
       list("*",             (x, y) =&gt; x * y  ),
       list("/",             (x, y) =&gt; x / y  ),
       list("%",             (x, y) =&gt; x % y  ),
       list("===",           (x, y) =&gt; x === y),
       list("!==",           (x, y) =&gt; x !== y),
       list("&lt;",             (x, y) =&gt; x &lt;   y),
       list("&lt;=",            (x, y) =&gt; x &lt;=  y),
       list("&gt;",             (x, y) =&gt; x &gt;   y),
       list("&gt;=",            (x, y) =&gt; x &gt;=  y),
       list("!",              x     =&gt;   !   x)
       );
      </JAVASCRIPT>
    </SNIPPET>
    <SNIPPET PAGE="382" HIDE="yes">
      <NAME>primitive_procedures_example</NAME>
      <JAVASCRIPT>
primitive_functions;	
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <JAVASCRIPT>
      <TEXT>
	Similar to primitive functions, we define primitive values
	that are installed in the global environment by
	the function <JAVASCRIPTINLINE>setup_environment</JAVASCRIPTINLINE>.
	<SNIPPET PAGE="382">
	  <NAME>primitive_constants</NAME>
	  <EXAMPLE>primitive_constants_example</EXAMPLE>
	  <JAVASCRIPT>
const primitive_constants = list(list("undefined", undefined),
                                 list("NaN",       NaN),
                                 list("Infinity",  Infinity),
                                 list("math_PI",   math_PI)
                                );
	  </JAVASCRIPT>
	</SNIPPET>

    <SNIPPET PAGE="382" HIDE="yes">
      <NAME>primitive_constants_example</NAME>
      <JAVASCRIPT>
primitive_constants;	
      </JAVASCRIPT>
    </SNIPPET>
	
      </TEXT>
    </JAVASCRIPT>
  </SPLIT>
  
  <TEXT>
    To apply a 
    <SPLITINLINE><SCHEME>primitive procedure,</SCHEME>
    <JAVASCRIPT>primitive function,</JAVASCRIPT></SPLITINLINE>
    we simply apply the implementation
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    to the arguments, using the underlying
    <SPLITINLINE><SCHEME>Lisp</SCHEME>
    <JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE>
    system:<SPLIT>
    <SCHEME>
      <FOOTNOTE><SCHEMEINLINE>Apply-in-underlying-scheme</SCHEMEINLINE> is the <SCHEMEINLINE>apply</SCHEMEINLINE>
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      we have used in earlier chapters.  The metacircular evaluator<APOS/>s <SCHEMEINLINE>apply</SCHEMEINLINE>
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
      (section<SPACE/><REF NAME="sec:core-of-evaluator"/>) models the
      working of this primitive.  Having two different things called <SCHEMEINLINE>apply</SCHEMEINLINE> leads to a technical problem in running the metacircular
      evaluator, because defining the metacircular evaluator<APOS/>s <SCHEMEINLINE>apply</SCHEMEINLINE>
      will mask the definition of the primitive.  One way around this is to
      rename the metacircular <SCHEMEINLINE>apply</SCHEMEINLINE> to avoid conflict with the name of
      the primitive
      <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.  We have assumed instead that we have saved a
      reference to the underlying <SCHEMEINLINE>apply</SCHEMEINLINE> by doing
      <SNIPPET>
	<NAME>apply_in_underlying</NAME>
	<SCHEME>
	  (define apply-in-underlying-scheme apply)
	</SCHEME>
      </SNIPPET>
      before defining the metacircular <SCHEMEINLINE>apply</SCHEMEINLINE>.  This allows us to
      access the original version of <SCHEMEINLINE>apply</SCHEMEINLINE> under a different name.
      </FOOTNOTE>
    </SCHEME>
    <JAVASCRIPT>
      <FOOTNOTE>
        JavaScript<APOS/>s <JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE> 
        method of function objects expects arguments in an array. Thus, the 
        <JAVASCRIPTINLINE>argument_list</JAVASCRIPTINLINE> is transformed into 
        an array using a <JAVASCRIPTINLINE>while</JAVASCRIPTINLINE> loop:
	<SNIPPET PAGE="382"  EVAL="no">
	  <NAME>apply_in_underlying</NAME>
	  <JAVASCRIPT>
function apply_in_underlying_javascript(prim, argument_list) {
   const argument_array = [];
   let i = 0;
   while (!is_null(argument_list)) {
      argument_array[i] = head(argument_list);
      i = i + 1;
      argument_list = tail(argument_list);
   }
   return prim.apply(prim, argument_array);
}
	  </JAVASCRIPT>
	</SNIPPET>
	We have made use of
	<JAVASCRIPTINLINE>apply_in_underlying_javascript</JAVASCRIPTINLINE>
	to define the function
	<JAVASCRIPTINLINE>apply</JAVASCRIPTINLINE> in
	section<SPACE/><REF NAME="sec:data-directed"/>.

      </FOOTNOTE>
    </JAVASCRIPT>
  </SPLIT>

  <SNIPPET PAGE="382">
    <NAME>apply_primitive_procedure</NAME>
    <EXAMPLE>apply_primitive_procedure_example</EXAMPLE>
    <SCHEME>
      (define (apply-primitive-procedure proc args)
      (apply-in-underlying-scheme
      (primitive-implementation proc) args))
    </SCHEME>
    <JAVASCRIPT>
function apply_primitive_function(fun, argument_list) {
    return apply_in_underlying_javascript(
                primitive_implementation(fun),
                argument_list);     
}
    </JAVASCRIPT>
  </SNIPPET>

	<SNIPPET PAGE="382" HIDE="yes">
	  <NAME>apply_primitive_procedure_example</NAME>
	  <REQUIRES>primitive_procedure</REQUIRES>
	  <REQUIRES>primitive_procedure_example</REQUIRES>
	  <JAVASCRIPT>
apply_primitive_function(my_primitive_plus, list(1, 2));
	  </JAVASCRIPT>
	</SNIPPET>

  
  <INDEX>metacircular evaluator for Scheme<SUBINDEX>primitive
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>|)</SUBINDEX></INDEX>
  </TEXT>

  <SNIPPET PAGE="383" HIDE="yes">
    <NAME>functions_4_1_4</NAME>
    <REQUIRES>headline_4_1_4</REQUIRES>
    <REQUIRES>true</REQUIRES>
    <REQUIRES>primitive_procedure</REQUIRES>
    <REQUIRES>primitive_procedures</REQUIRES>
    <REQUIRES>primitive_constants</REQUIRES>
    <REQUIRES>apply_primitive_procedure</REQUIRES>
    <REQUIRES>setup_environment</REQUIRES>
    <REQUIRES>the_global_environment</REQUIRES>
    <JAVASCRIPT>
    </JAVASCRIPT>
  </SNIPPET>
  
  <SPLIT>
    <SCHEME>
      <TEXT>
	<INDEX>metacircular evaluator for Scheme<SUBINDEX>driver loop</SUBINDEX></INDEX>
	<INDEX>driver loop<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
	For convenience in running the metacircular evaluator, we provide a <EM>
	driver loop</EM> that models the read-eval-print loop of the underlying
	<SPLITINLINE><SCHEME>Lisp</SCHEME><JAVASCRIPT>JavaScript</JAVASCRIPT></SPLITINLINE> system.  It prints a 
	<INDEX>prompts</INDEX>
	<EM>prompt</EM>, reads an input expression,
	evaluates this expression in the global environment, and prints the
	result.  We precede each printed result by an <EM>output prompt</EM> so
	as to distinguish the value of the expression from other
	output that may be printed.<FOOTNOTE>The primitive
	<SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>

	<!-- \indprim*{read}-->
	<!-- \ind*{primitive
             <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
             (those marked <EM>ns</EM> are not in the IEEE Scheme standard)}[read@<SCHEMEINLINE>read</SCHEMEINLINE>]
        -->
	<SCHEMEINLINE>read</SCHEMEINLINE> waits for input from the user,
	and returns the next complete expression that is typed.
	For example, if the user types <SPLITINLINE><SCHEME><SCHEMEINLINE>(+ 23 x)</SCHEMEINLINE></SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>???</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, <SCHEMEINLINE>read</SCHEMEINLINE> returns
	a three-element list containing the symbol <SCHEMEINLINE>+</SCHEMEINLINE>, the number 23,
	and the symbol <SCHEMEINLINE>x</SCHEMEINLINE>.
	<!-- \indcodeplus{'}{(single quote)}[read@<SCHEMEINLINE>read</SCHEMEINLINE> and]-->
	<!-- \indsf{quote}[read@<SCHEMEINLINE>read</SCHEMEINLINE> and]-->
	If the user types <SCHEMEINLINE>'x</SCHEMEINLINE>, <SCHEMEINLINE>read</SCHEMEINLINE> returns a two-element list
	containing the symbol <SCHEMEINLINE>quote</SCHEMEINLINE> and the symbol <SCHEMEINLINE>x</SCHEMEINLINE>.</FOOTNOTE>

	<SNIPPET PAGE="383">
	  <NAME>driver_loop</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <REQUIRES>user_print</REQUIRES>
	  <EXAMPLE>driver_loop_example</EXAMPLE>
	  <SCHEME>
(define input-prompt ";;; M-Eval input:\n")
(define output-prompt ";;; M-Eval value:\n")

(define (driver-loop)
  (prompt-for-input input-prompt)
  (let ((input (read)))
    (if (null? input)
      \&apos;EVALUATOR-TERMINATED
      (let ((output (eval input the-global-environment)))
        (announce-output output-prompt)
        (user-print output)
        (driver-loop)))))

(define (prompt-for-input string)
  (newline) (display string))

(define (announce-output string)
  (newline) (display string))

\&apos;METACIRCULAR-EVALUATOR-LOADED
	  </SCHEME>
	  <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
	</SNIPPET>
      </TEXT>
    </SCHEME>
    <JAVASCRIPT>
      <TEXT>
    <INDEX>metacircular evaluator for Scheme<SUBINDEX>driver loop</SUBINDEX></INDEX>
    <INDEX>driver loop<SUBINDEX>metacircular@in metacircular evaluator</SUBINDEX></INDEX>
    For convenience in running the metacircular evaluator, we provide a <EM>
    driver loop</EM> that models the underlying JavaScript system. It prints a 
    <INDEX>prompts</INDEX>
    <EM>prompt</EM>, reads an input expression from a pop-up window,
    evaluates this expression in a suitable environment, and prints the
    result on the next pop-up window. We precede each printed
    result by an <EM>output prompt</EM> so as to distinguish the value of
    the expression from the output that may be printed.

    <SNIPPET PAGE="383">
      <NAME>driver_loop</NAME>
	  <REQUIRES>functions_4_1_1</REQUIRES>
	  <REQUIRES>functions_4_1_2</REQUIRES>
	  <REQUIRES>functions_4_1_3</REQUIRES>
	  <REQUIRES>functions_4_1_4</REQUIRES>
	  <REQUIRES>user_print</REQUIRES>
	  <EXAMPLE>driver_loop_example</EXAMPLE>
      <JAVASCRIPT>
const input_prompt = "M-Eval input: ";
const output_prompt = "M-Eval output: ";

function driver_loop(env, history) {
    const input = prompt(history + input_prompt);
    if (input === null) {
        display("session has ended");
    } else {
        const program = parse(input);
        const locals = local_names(program);	    
        const temp_values = map(x => no_value_yet,
                                locals);
        const new_env = extend_environment(locals, temp_values, env);
        const res = evaluate(program, new_env);

        driver_loop(new_env, history + "\\n" + 
                             input_prompt + input + "\\n" +
                             output_prompt + stringify(user_print(res)));
    }
}
      </JAVASCRIPT>
    </SNIPPET>
    We transform the input string that is read by <JAVASCRIPTINLINE>prompt</JAVASCRIPTINLINE>
    into a tagged-list representation of the statement according to the description in
    section 4.1.2, a process called parsing and accomplished by the primitive function
    <JAVASCRIPTINLINE>parse</JAVASCRIPTINLINE>. Similar to the evaluation of
    blocks in <REF NAME="sec:core-of-evaluator"/>, we create a new environment by
    extending the given environment by a binding of the local names in the program
    to the special value <JAVASCRIPTINLINE>no_value_yet</JAVASCRIPTINLINE>, and
    evaluate the program with respect to the new environment. Passing the new
    environment in the recursive call of <JAVASCRIPTINLINE>driver_loop</JAVASCRIPTINLINE>
    ensures that subsequent programs can refer to previously declared names.
      </TEXT>
    </JAVASCRIPT>


      </SPLIT>
      <TEXT>
  We use a special printing
  <SPLITINLINE><SCHEME>procedure <SCHEMEINLINE>user-print</SCHEMEINLINE></SCHEME>
  <JAVASCRIPT>function <JAVASCRIPTINLINE>user_print</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>, 
  to avoid printing the environment part of a compound
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which may be a very long list
  (or may even contain cycles).

  <SNIPPET PAGE="383" EVAL="no">
    <NAME>user_print</NAME>
    <SCHEME>
(define (user-print object)
  (if (compound-procedure? object)
      (display (list \&apos;compound-procedure
                     (procedure-parameters object)
                     (procedure-body object)
                     \&apos;&lt;procedure-env&gt;))
      (display object)))
    </SCHEME>
    <JAVASCRIPT>
function user_print(object) {
   return is_compound_function(object)
       ? "compound function" +
         stringify(function_parameters(object)) +
         stringify(function_body(object)) +
         "&lt;environment&gt;"
       : object;
}
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  Now all we need to do to run the evaluator is to initialize the
  global environment and start the driver loop.  Here is a sample
  interaction:
  <SNIPPET PAGE="383-384">
    <NAME>driver_loop_example</NAME>
    <REQUIRES>driver_loop</REQUIRES>
    <SCHEME>
(define the-global-environment (setup-environment))
(driver-loop)
    </SCHEME>
    <SCHEME_STATEMENT>true</SCHEME_STATEMENT>
    <JAVASCRIPT>
const the_global_environment = setup_environment();
driver_loop(the_global_environment, "");
    </JAVASCRIPT>
    <JAVASCRIPT_RUN>
driver_loop(the_global_environment, "");
    </JAVASCRIPT_RUN>
    
  </SNIPPET>

  <SNIPPET EVAL="no">
    <SCHEME>
;;; M-Eval input:
(define (append x y)
   (if (null? x)
       y
       (cons (car x)
         (append (cdr x) y))))
;;; M-Eval value:
ok

;;; M-Eval input:
(append '(a b c) '(d e f))
;;; M-Eval value:
(a b c d e f)
    </SCHEME>
    <JAVASCRIPT>
M-Eval input:
function append(xs,ys) { 
    if (is_null(xs)) {
       return ys; 
    } else {
       return pair(head(xs),append(tail(xs),ys)); 
    }
}
M-Eval value: undefined

M-Eval input:    
append(list('a', 'b', 'c'), list('d', 'e', 'f'));

M-Eval value: ['a', ['b', ['c', ['d', ['e', ['f', null]]]]]]
    </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <EXERCISE>
  Eva Lu Ator and Louis Reasoner are each experimenting with the
  metacircular evaluator.  Eva types in the definition of <SCHEMEINLINE>map</SCHEMEINLINE>, and
  runs some test programs that use it.  They work fine.  Louis, in contrast,
  has installed the system version of <SCHEMEINLINE>map</SCHEMEINLINE> as a primitive for the
  metacircular evaluator.  When he tries it, things go terribly
  wrong.  Explain why Louis<APOS/>s <SCHEMEINLINE>map</SCHEMEINLINE> fails even though Eva<APOS/>s works.
  <LABEL NAME="ex:mceval-map"/>
      </EXERCISE>
      <INDEX>metacircular evaluator for Scheme<SUBINDEX>running|)</SUBINDEX></INDEX>

</SUBSECTION>
