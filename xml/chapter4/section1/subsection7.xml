<SUBSECTION WIP="yes">
  <NAME>
    Separating Syntactic Analysis from Execution
  </NAME>

  <LABEL NAME="sec:separating-analysis"/>
  <INDEX>syntactic analysis, separated from execution
  <SUBINDEX>in metacircular evaluator|(</SUBINDEX></INDEX>
  <INDEX>analyzing evaluator|(</INDEX>
  <INDEX>metacircular evaluator for Scheme
  <SUBINDEX>analyzing version|(</SUBINDEX></INDEX>
  <INDEX>metacircular evaluator for Scheme
  <SUBINDEX>efficiency of</SUBINDEX></INDEX>
  <INDEX>efficiency
  <SUBINDEX>evaluation@of evaluation</SUBINDEX></INDEX>

  <TEXT>
    The evaluator implemented above is simple, but it is very
    inefficient, because the syntactic analysis of expressions is interleaved
    with their execution.  Thus if a program is executed many times, its
    syntax is analyzed many times.  Consider, for example, evaluating
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(factorial 4)</SCHEMEINLINE></SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>factorial(4)</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE> using the following definition of
    <SCHEMEINLINE>factorial</SCHEMEINLINE>:

    <SNIPPET>
      <SCHEME>
      (define (factorial n)
      (if (= n 1)
      1
      (* (factorial (- n 1)) n)))
      </SCHEME>
      <JAVASCRIPT>
function factorial(n) {      
    return n === 1
           ?
           factorial(n - 1) * n;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Each time <SCHEMEINLINE>factorial</SCHEMEINLINE> is called, the evaluator
    must determine that the body is
    <SPLITINLINE>
      <SCHEME>an <SCHEMEINLINE>if</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>a conditional
      </JAVASCRIPT>
    </SPLITINLINE>
    expression and extract the predicate. Only then can it evaluate the
    predicate and dispatch on its value.  Each time it evaluates the expression
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(* (factorial (- n 1)) n)</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>factorial(n - 1) * n</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    or the subexpressions
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>(factorial (- n 1))</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>factorial(n - 1)</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    and 
    <SPLITINLINE><SCHEME><SCHEMEINLINE>(- n 1)</SCHEMEINLINE>,</SCHEME>
    <JAVASCRIPT><JAVASCRIPTINLINE>n - 1</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    the evaluator must perform the case analysis in
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    to determine that the expression is an application, and must extract
    its operator and operands.  This analysis is expensive.
    Performing it repeatedly is wasteful.
  </TEXT>

  <TEXT>
    We can transform the evaluator to be significantly more efficient by
    arranging things so that syntactic analysis is performed only
    once.<FOOTNOTE>This technique is an integral part of the compilation
    process, which we shall discuss in chapter<SPACE/>5.  Jonathan Rees wrote
    a Scheme
    <INDEX>Rees, Jonathan A.</INDEX><INDEX>Adams, Norman I., IV</INDEX>
    <INDEX>Feeley, Marc</INDEX><INDEX>Lapalme, Guy</INDEX>
    interpreter like this in about 1982 for the T project 
    (<CITATION>Rees and Adams 1982</CITATION>).  
    <CITATION>Marc Feeley 1986</CITATION> 
    (see also <CITATION>Feeley and Lapalme 1987</CITATION>)
    independently invented this technique
    in his master<APOS/>s thesis.</FOOTNOTE> We split
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE>,</SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE>,</JAVASCRIPT>
    </SPLITINLINE>
    which takes an
    expression and an environment, into two parts.  The
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SCHEMEINLINE>analyze</SCHEMEINLINE> takes only the expression.
    It performs the syntactic
    analysis and returns a new
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, the 
    <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    <SUBINDEX>in analyzing evaluator</SUBINDEX></INDEX>
    <EM>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></EM>, that
    encapsulates the work to be done in executing the analyzed
    expression.  The execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    takes an environment as its
    argument and completes the evaluation.  This saves work because
    <SCHEMEINLINE>analyze</SCHEMEINLINE> will be called only once on
    an expression, while the execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    may be called many times.
  </TEXT>

  <TEXT>
    With the separation into analysis and execution,
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>eval</SCHEMEINLINE></SCHEME>
      <JAVASCRIPT><JAVASCRIPTINLINE>evaluate</JAVASCRIPTINLINE></JAVASCRIPT>
    </SPLITINLINE>
    now becomes

    <SNIPPET EVAL="no">
      <SCHEME>
      <!-- \indcodeplus*{eval}{(metacircular)}[analyzing version]-->
      (define (eval exp env)
      ((analyze exp) env))
      </SCHEME>
      <JAVASCRIPT>
function evaluate(exp, env) {      
    return (analyze(exp))(env);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    The result of calling <SCHEMEINLINE>analyze</SCHEMEINLINE> is the execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    to be applied to the environment.  The
    <SCHEMEINLINE>analyze</SCHEMEINLINE>
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    is the same case analysis as performed by the original
    <SCHEMEINLINE>eval</SCHEMEINLINE> of
    section<SPACE/><REF NAME="sec:core-of-evaluator"/>,
    except that the
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    to which we dispatch perform only analysis, not full evaluation:

    <SNIPPET EVAL="no">
      <SCHEME>
      <!--  \indcode*{analyze}[metacircular] -->
      (define (analyze exp)
      (cond ((self-evaluating? exp) 
            (analyze-self-evaluating exp))
            ((quoted? exp) (analyze-quoted exp))
            ((variable? exp) (analyze-variable exp))
            ((assignment? exp) (analyze-assignment exp))
            ((definition? exp) (analyze-definition exp))
            ((if? exp) (analyze-if exp))
            ((lambda? exp) (analyze-lambda exp))
            ((begin? exp) (analyze-sequence (begin-actions exp)))
            ((cond? exp) (analyze (cond-&gt;if exp)))
            ((application? exp) (analyze-application exp))
            (else
            (error "Unknown expression type - - ANALYZE" exp))))
      </SCHEME>
      <JAVASCRIPT>
function analyze(stmt) {
    return is_self_evaluating(stmt)
           ? analyze_self_evaluating(stmt)
         : is_name(stmt)
           ? analyze_name(stmt)
         : is_constant_declaration(stmt)
           ? analyze_constant_declaration(stmt)
         : is_variable_declaration(stmt)
           ? analyze_variable_declaration(stmt)
         : is_assignment(stmt)
           ? analyze_assignment(stmt)
         : is_conditional_expression(stmt)
           ? analyze_conditional_expression(stmt)
         : is_function_definition(stmt)
           ? analyze_function_definition(stmt)
         : is_sequence(stmt)
           ? analyze_sequence(sequence_actions(stmt))
         : is_block(stmt)
           ? analyze_block(block_body(stmt))
         : is_return_statement(stmt)
           ? analyze_return_statement(stmt)
         : is_application(stmt)
           ? analyze_application(stmt)
         : error(stmt, "Unknown statement type in analyze");
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Here is the simplest syntactic analysis
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, which handles
    self-evaluating expressions.  It returns an execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    that
    ignores its environment argument and just returns the expression:

    <!--  \indcode{analyze-...}[metacircular|(] -->
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-self-evaluating exp)
      (lambda (env) exp))
      </SCHEME>
      <JAVASCRIPT>
function analyze_self_evaluating(stmt) {      
    return env => stmt;
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <SPLIT>
    <SCHEME>
      <TEXT>
	For a quoted expression, we can gain a little efficiency by
	extracting the text of the quotation only once, in the analysis phase,
	rather than in the execution phase.

	<SNIPPET EVAL="no">
	  <SCHEME>
      (define (analyze-quoted exp)
      (let ((qval (text-of-quotation exp)))
      (lambda (env) qval)))
	  </SCHEME>
	</SNIPPET>
      </TEXT>
    </SCHEME>
  </SPLIT>
  
  <TEXT>
    Looking up
    <SPLITINLINE>
      <SCHEME>
	a variable value	    
      </SCHEME>
      <JAVASCRIPT>
	the value of a name
      </JAVASCRIPT>
    </SPLITINLINE>
    must still be done in the execution phase,
    since this depends upon knowing the environment.<FOOTNOTE>There is,
    however, an important part of the variable search that <EM>can</EM> be
    done as part of the syntactic analysis.
    <SPLIT>
      <SCHEME>
        As we will show in
    section<SPACE/><REF NAME="sec:lexical-addressing"/>,
    one can determine the position
    in the environment structure where the value of the variable will be
    found, thus obviating the need to scan the environment for the entry
    that matches the variable.
      </SCHEME>
      <JAVASCRIPT>
        <!-- FIXME: remove split and replace with scheme text once Chapter 5.5.6 is adapted to JavaScript -->
      </JAVASCRIPT>
    </SPLIT>
</FOOTNOTE>

    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-variable exp)
      (lambda (env) (lookup-variable-value exp env)))
      </SCHEME>
      <JAVASCRIPT>
function analyze_name(stmt) {      
    return env => lookup_name_value(
                      name_of_name(stmt, env));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Analyze-assignment</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>analyze_assignment</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    also must defer actually setting the variable
    until the execution, when the environment has been supplied.  However,
    the fact that the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>assignment-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>assignment_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    expression can be analyzed (recursively) during analysis is a
    major gain in efficiency, because the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>assignment-value</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>The function
      <JAVASCRIPTINLINE>assignment_value</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    expression will now be analyzed
    only once.  The same holds true for
    <SPLITINLINE>
      <SCHEME>definitions.</SCHEME>
      <JAVASCRIPT>constant and variable declarations.</JAVASCRIPT>
    </SPLITINLINE>
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-assignment exp)
      (let ((var (assignment-variable exp))
            (vproc (analyze (assignment-value exp))))
      (lambda (env)
      (set-variable-value! var (vproc env) env)
      'ok)))

      (define (analyze-definition exp)
      (let ((var (definition-variable exp))
            (vproc (analyze (definition-value exp))))
      (lambda (env)
      (define-variable! var (vproc env) env)
      'ok)))
      </SCHEME>
      <JAVASCRIPT>
function analyze_assignment(stmt) {
    const variable = assignment_variable(stmt);
    const vfun = analyze(assignment_value(stmt));
    return env => {
               set_variable_value(variable,
                   vfun(env), env);
               return "ok";
           };
}
function analyze_variable_declaration(stmt) {	   
    const name = 
        variable_declaration_name(stmt);
    const vfun =
        variable_declaration_value(stmt);
    return env => {
               declare_variable(name, 
                                vfun(env),
				env);
	       return "ok";
           };
}
function analyze_constant_declaration(stmt) {	   
    const name = 
        constant_declaration_name(stmt);
    const vfun =
        constant_declaration_value(stmt);
    return env => {
               declare_constant(name, 
                                vfun(env),
				env);
	       return "ok";
           };
}
       </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    For
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>if</SCHEMEINLINE>expressions,
      </SCHEME>
      <JAVASCRIPT>
	conditional expressions,
      </JAVASCRIPT>
    </SPLITINLINE>
    we extract and analyze the predicate,
    consequent, and alternative at analysis time.

    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-if exp)
      (let ((pproc (analyze (if-predicate exp)))
            (cproc (analyze (if-consequent exp)))
            (aproc (analyze (if-alternative exp))))
      (lambda (env)
      (if (true? (pproc env))
            (cproc env)
            (aproc env)))))
      </SCHEME>
      <JAVASCRIPT>
function analyze_conditional_expression(stmt) {	
    const pfun = analyze(cond_expr_pred(stmt));
    const cfun = analyze(cond_expr_cons(stmt));
    const afun = analyze(cond_expr_alt(stmt));
    return env => is_true(pfun(env))
                  ? cfun(env) 
		  : afun(env);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Analyzing a
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	function definition
      </JAVASCRIPT>
    </SPLITINLINE>
    expression also achieves a major
    gain in efficiency: We analyze the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	function
      </JAVASCRIPT>
    </SPLITINLINE>
    body
    only once, even though
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    resulting from evaluation of the
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>lambda</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	function definition
      </JAVASCRIPT>
    </SPLITINLINE>
    may be applied many times.

    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-lambda exp)
      (let ((vars (lambda-parameters exp))
            (bproc (analyze-sequence (lambda-body exp))))
      (lambda (env) (make-procedure vars bproc env))))
      </SCHEME>
      <JAVASCRIPT>
function analyze_function_definition(stmt) {
    const vars = 
        function_definition_parameters(stmt);
    const bfun =
        analyze(function_definition_body(stmt);
    return env =>
	make_function(vars, bfun, env);
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Analysis of a sequence of
    <SPLITINLINE>
      <SCHEME>
	expressions (as in a
	<SCHEMEINLINE>begin</SCHEMEINLINE> or the body
	of a <SCHEMEINLINE>lambda</SCHEMEINLINE> expression)
      </SCHEME>
      <JAVASCRIPT>
	statements
      </JAVASCRIPT>
    </SPLITINLINE>
    is more 
    involved.<FOOTNOTE>See
    exercise<SPACE/><REF NAME="ex:analyze-sequence"/> for some insight
    into the processing of sequences.</FOOTNOTE>
    Each
    <SPLITINLINE>
      <SCHEME>
	expression
      </SCHEME>
      <JAVASCRIPT>
	statement
      </JAVASCRIPT>
    </SPLITINLINE>
    in the sequence is analyzed, yielding an execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>.
    These execution
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    are combined to produce an execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    that takes an environment as argument and sequentially
    calls each individual execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    with the environment as argument.

    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-sequence exps)
      (define (sequentially proc1 proc2)
      (lambda (env) (proc1 env) (proc2 env)))
      (define (loop first-proc rest-procs)
      (if (null? rest-procs)
            first-proc
            (loop (sequentially first-proc (car rest-procs))
            (cdr rest-procs))))
      (let ((procs (map analyze exps)))
      (if (null? procs)
            (error "Empty sequence - - ANALYZE"))
      (loop (car procs) (cdr procs))))
      </SCHEME>
      <JAVASCRIPT>
function analyze_sequence(stmts) {
    function sequentially(fun1, fun2) {
        return env => {
                   fun1(env);
                   fun2(env);
               };
    }
    function loop(first_fun, rest_funs) {
        return is_null(rest_funs)
               ? first_fun
               : loop(sequentially(first_fun,
                          head(rest_funs)),
                      tail(rest_funs));
    }
    const funs = map(analyze, stmts);
    return is_null(funs) 
           ? env => undefined
           : loop(head(funs), tail(funs));
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    To analyze an application, we analyze the operator and
    operands and construct an execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    that calls the operator execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    (to obtain the actual
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    to be applied) and the operand execution
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    (to obtain the actual arguments).  We then pass these to
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>execute-application</SCHEMEINLINE>,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>execute_application</JAVASCRIPTINLINE>,
      </JAVASCRIPT>
    </SPLITINLINE>
    which is the analog of
    <SCHEMEINLINE>apply</SCHEMEINLINE> in
    section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>Execute-application</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	The function
	<JAVASCRIPTINLINE>execute_application</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    differs from
    <SCHEMEINLINE>apply</SCHEMEINLINE>
    in that the
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    body for a compound
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    has already been analyzed, so there is no need to
    do further analysis.  Instead, we just call the execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    for the body on the extended environment.
    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-application exp)
      (let ((fproc (analyze (operator exp)))
            (aprocs (map analyze (operands exp))))
      (lambda (env)
      (execute-application (fproc env)
            (map (lambda (aproc) (aproc env))
            aprocs)))))
      <!--  \indcode{analyze-...}[metacircular|)] -->


      <!--  \indcode*{execute-application}[metacircular] -->
      (define (execute-application proc args)
      (cond ((primitive-procedure? proc)
            (apply-primitive-procedure proc args))
            ((compound-procedure? proc)
            ((procedure-body proc)
            (extend-environment (procedure-parameters proc)
            args
            (procedure-environment proc))))
            (else
            (error
            "Unknown procedure type - - EXECUTE-APPLICATION"
            proc))))
      </SCHEME>
      <JAVASCRIPT>
function analyze_application(stmt) {	
    const ffun = analyze(operator(stmt));
    const afuns = map(analyze, operands(stmt));
    return env =>
           execute_application(ffun(env),
               map(afun => afun(env), afuns));
}
function execute_application(fun, args) {	       
    return is_primitive_function(fun)
           ? apply_primitive_function(fun, args)
           : is_compound_function(fun) 
             ? (function_body(fun))
               (extend_environment(
                    function_parameters(fun),
                    args,
                    function_environment(fun)))
             : error(fun, "unknown function type in " +
                          "execute_application");
}
      </JAVASCRIPT>
    </SNIPPET>
  </TEXT>

  <TEXT>
    Our new evaluator uses the same data structures, syntax
    <SPLITINLINE><SCHEME>procedures,</SCHEME>
    <JAVASCRIPT>functions,</JAVASCRIPT></SPLITINLINE>
    and run-time support
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    as in
    sections<SPACE/><REF NAME="sec:representing-expressions"/>,
    <SPACE/><REF NAME="sec:eval-data-structures"/>,
    and<SPACE/><REF NAME="sec:running-eval"/>.
  </TEXT>

  <SPLIT>
    <SCHEME>
      <EXERCISE>
	<INDEX>analyzing evaluator
	<SUBINDEX>let@<SCHEMEINLINE>let</SCHEMEINLINE></SUBINDEX></INDEX>
	Extend the evaluator in this section to support the special form
	<SCHEMEINLINE>let</SCHEMEINLINE>.
	(See exercise<SPACE/><REF NAME="ex:implement-let"/>.)
	<LABEL NAME="ex:implement-analyze-let"/>
      </EXERCISE>
    </SCHEME>
    <JAVASCRIPT>
      <EXERCISE>
	<INDEX>analyzing evaluator
	<SUBINDEX>conditional expressions</SUBINDEX></INDEX>
	Extend the evaluator in this section to support
	conditional expressions.
      </EXERCISE>
    </JAVASCRIPT>
  </SPLIT>
  
  <EXERCISE>
    <!--  \indcode{analyze-...}[metacircular] -->
    Alyssa P. Hacker doesn<APOS/>t understand why
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>analyze-sequence</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>analyze_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    needs to be
    so complicated.  All the other analysis
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    are straightforward transformations of the corresponding evaluation
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    (or <SCHEMEINLINE>eval</SCHEMEINLINE> clauses) in
    section<SPACE/><REF NAME="sec:core-of-evaluator"/>.
    She expected
    <SPLITINLINE>
      <SCHEME>
	<SCHEMEINLINE>analyze-sequence</SCHEMEINLINE>
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>analyze_sequence</JAVASCRIPTINLINE>
      </JAVASCRIPT>
    </SPLITINLINE>
    to look like this:

    <!-- 
	 %***But note one drawback - - eval-sequence used first-exp/etc.
	 %(the not-really-a-data-abstraction selectors), whereas this
	 %has to use car/etc., so the match isn't perfectly clear.
    -->

    <SNIPPET EVAL="no">
      <SCHEME>
      (define (analyze-sequence exps)
      (define (execute-sequence procs env)
      (cond ((null? (cdr procs)) ((car procs) env))
            (else ((car procs) env)
            (execute-sequence (cdr procs) env))))
      (let ((procs (map analyze exps)))
      (if (null? procs)
            (error "Empty sequence - - ANALYZE"))
      (lambda (env) (execute-sequence procs env))))
      </SCHEME>
      <JAVASCRIPT>
function analyze_sequence(stmts) {	
    function execute_sequence(funs, env) {
        if (is_null(tail(funs))) {
            return head(funs)(env);
        } else {
            head(funs)(env);
            execute_sequence(tail(funs), 
                             env);
        }
    }
    const funs = map(analyze, stmts);
    return is_null(funs)
           ? env => undefined
           : env => execute_sequence(funs, 
                                     env);
}
      </JAVASCRIPT>
    </SNIPPET>

    Eva Lu Ator explains to Alyssa that the version in the text does more
    of the work of evaluating a sequence at analysis time.
    Alyssa<APOS/>s 
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sequence-execution</SCHEMEINLINE> procedure,
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sequence_execution</JAVASCRIPTINLINE> function,
      </JAVASCRIPT>
    </SPLITINLINE>
    rather than having the calls to the individual execution
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    built in, loops through the
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
    in order to call them: In effect, although the individual expressions
    in the sequence have been analyzed, the sequence itself has not been.

    Compare the two versions of
    <SPLITINLINE>
      <SCHEME><SCHEMEINLINE>sequence-execution</SCHEMEINLINE>.
      </SCHEME>
      <JAVASCRIPT>
	<JAVASCRIPTINLINE>sequence_execution</JAVASCRIPTINLINE>.
      </JAVASCRIPT>
    </SPLITINLINE>
    For example,
    consider the common case (typical of
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    bodies) where the
    sequence has just one expression.  What work will the execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    produced by Alyssa<APOS/>s program do?  What about the execution
    <SPLITINLINE><SCHEME>procedure</SCHEME>
    <JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
    produced by the program in the text above?  How do the two
    versions compare for a sequence with two expressions?
    <LABEL NAME="ex:analyze-sequence"/>
  </EXERCISE>

  <EXERCISE>
    Design and carry out some experiments to 
    compare the speed of the original metacircular evaluator
    with the version in this section.  Use your results to estimate the
    fraction of time that is spent in analysis versus execution for various
    <SPLITINLINE><SCHEME>procedures</SCHEME>
    <JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>.
  </EXERCISE>
  <INDEX>syntactic analysis, separated from execution
  <SUBINDEX>in metacircular evaluator|)</SUBINDEX></INDEX>
  <INDEX>analyzing evaluator|)</INDEX>
  <INDEX>metacircular evaluator for Scheme
  <SUBINDEX>analyzing version|)</SUBINDEX></INDEX>

</SUBSECTION>
