    <SUBSECTION>
      <NAME>
  The Machine Model
      </NAME>

      <LABEL NAME="sec:machine-model"/>

      <TEXT>
  The machine model generated by <SPLITINLINE><SCHEME>make-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is represented as a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  with local state using the message-passing techniques
  developed in chapter<SPACE/>3.  To build this model, <SPLITINLINE><SCHEME>make-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  begins by calling the
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>make-new-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_new_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> to construct
  the parts of the machine model that are common to all register
  machines.  This basic machine model constructed by <SPLITINLINE><SCHEME>make-new-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_new_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> is essentially a container for some registers and a
  stack, together with an execution mechanism that processes the controller
  instructions one by one.
      </TEXT>

      <TEXT>
  <SPLITINLINE><SCHEME>Make-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>Make_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> then extends this basic model (by sending it
  messages) to include the registers, operations, and controller of the
  particular machine being defined.  First it allocates a register in
  the new machine for each of the supplied register names and installs
  the designated operations in the machine.  Then it uses an 
  <INDEX>assembler</INDEX>
  <EM>
    assembler</EM> (described below in section<SPACE/><REF NAME="sec:assembler"/>) to
  transform the controller list into instructions for the new machine
  and installs these as the machine<APOS/>s instruction sequence.  <SPLITINLINE><SCHEME>Make-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>Make_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> returns as its value the modified machine model.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-machine} -->
      (define (make-machine register-names ops controller-text)
      (let ((machine (make-new-machine)))
      (for-each (lambda (register-name)
            ((machine 'allocate-register) register-name))
            register-names)
      ((machine 'install-operations) ops)    
      ((machine 'install-instruction-sequence)
      (assemble controller-text machine))
      machine))
    </SCHEME>
  <JAVASCRIPT>
function make_machine(register_names, ops, controller_text) {
    const machine = make_new_machine();

    map(reg_name => machine("allocate_register")(reg_name), register_names);
    machine("install_operations")(ops);
    machine("install_instruction_sequence")(assemble(controller_text, machine));

    return machine;
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>Registers</NAME>
      </SUBHEADING>

      <INDEX>register(s)<SUBINDEX>representing</SUBINDEX></INDEX>

      <TEXT>
  We will represent a register as a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  with local state, as in
  chapter<SPACE/>3.  The
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>make-register</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_register</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> creates a register that
  holds a value that can be accessed or changed:

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-register} -->
      (define (make-register name)
      (let ((contents '*unassigned*))
      (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set)
            (lambda (value) (set! contents value)))
            (else
            (error "Unknown request - - REGISTER" message))))
      dispatch))
    </SCHEME>
  <JAVASCRIPT>
function make_register(name) {
    let contents = "*unassigned*";

    function dispatch(message) {
        if (message === "get") {
            return contents;

        } else {
            if (message === "set") {
                return value => { contents = value; };

            } else {
                error(message, "Unknown request: REGISTER");
            }
        }
    }

    return dispatch;
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The following
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  are used to access registers:

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{get-contents} -->
      (define (get-contents register)
      (register 'get))

      <!--  \indcode*{set-contents!} -->
      (define (set-contents! register value)
      ((register 'set) value))
    </SCHEME>
  <JAVASCRIPT>
function get_contents(register) {
    return register("get");
}

function set_contents(register, value) {
    return register("set")(value);
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>The stack</NAME>
      </SUBHEADING>

      <INDEX>stack<SUBINDEX>representing</SUBINDEX></INDEX>

      <TEXT>
  We can also represent a stack as a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  with local state.  The
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>make-stack</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_stack</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> creates a stack whose local state consists
  of a list of the items on the stack.  A stack accepts requests to <SPLITINLINE><SCHEME>push</SCHEME><JAVASCRIPT>push</JAVASCRIPT></SPLITINLINE> an
  item onto the stack, to <SPLITINLINE><SCHEME>pop</SCHEME><JAVASCRIPT>pop</JAVASCRIPT></SPLITINLINE> the top item off the stack
  and return it, and to <SPLITINLINE><SCHEME>initialize</SCHEME><JAVASCRIPT>initialize</JAVASCRIPT></SPLITINLINE> the stack to empty.

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-stack} -->
      (define (make-stack)
      (let ((s '()))
      (define (push x)
      (set! s (cons x s)))
      (define (pop)
      (if (null? s)
            (error "Empty stack - - POP")
            (let ((top (car s)))
            (set! s (cdr s))
            top)))
      (define (initialize)
      (set! s '())
      'done)
      (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) (pop))
            ((eq? message 'initialize) (initialize))
            (else (error "Unknown request - - STACK"
            message))))
      dispatch))
    </SCHEME>
  <JAVASCRIPT>
function make_stack() {
    let stack = null;

    function push(x) { 
        stack = pair(x, stack); 
        return "done";
    }

    function pop() {
        if (is_null(stack)) {
            error("Empty stack: POP");

        } else {
            const top = head(stack);
            stack = tail(stack);
            return top;
        }
    }

    function initialize() {
        stack = null;
        return "done";
    }

    function dispatch(message) {
        return message === "push"
            ? push
            : message === "pop"
            ? pop()
            : message === "initialize"
            ? initialize()
            : error("Unknown request: STACK", message);
    }

    return dispatch;
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  The following
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  are used to access stacks:

  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{pop} -->
      (define (pop stack)
      (stack 'pop))

      <!--  \indcode*{push} -->
      (define (push stack value)
      ((stack 'push) value))
    </SCHEME>
  <JAVASCRIPT>
function pop(stack) {
    return stack("pop");
}

function push(stack, value) {
    return stack("push")(value);
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <SUBHEADING>
  <NAME>The basic machine</NAME>
      </SUBHEADING>

      <TEXT>
  The <SPLITINLINE><SCHEME>make-new-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>make_new_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, shown in
  figure<SPACE/><REF NAME="fig:make-new-machine"/>, constructs an object whose local
  state consists of a stack, an initially empty instruction sequence, a
  list of operations that initially contains an operation to 
  <!-- \indcodeplus{initialize-stack}{operation in register machine}-->
  initialize
  the stack, and a 
  <INDEX>register table, in simulator</INDEX>
  <EM>register table</EM> that initially contains two
  <!-- \indcodeplus{flag}{register}-->
  <!-- \indcodeplus{pc}{register}-->
  registers, named <SPLITINLINE><SCHEME>flag</SCHEME><JAVASCRIPT>flag</JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE>
  <INDEX>program counter</INDEX>
  (for <QUOTE>program counter</QUOTE>).
  The internal
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>allocate_register</SCHEME><JAVASCRIPT></JAVASCRIPT></SPLITINLINE> adds new entries to the
  register table, and the internal
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>lookup-register</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>lookup_register</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> looks
  up registers in the table.
      </TEXT>

      <TEXT>
  The <SPLITINLINE><SCHEME>flag</SCHEME><JAVASCRIPT>flag</JAVASCRIPT></SPLITINLINE> register is used to control branching in the simulated
  machine.  <SPLITINLINE><SCHEME>Test</SCHEME><JAVASCRIPT>Test</JAVASCRIPT></SPLITINLINE> instructions set the contents of <SPLITINLINE><SCHEME>flag</SCHEME><JAVASCRIPT>flag</JAVASCRIPT></SPLITINLINE> to
  the result of the test (true or false).  <SPLITINLINE><SCHEME>Branch</SCHEME><JAVASCRIPT>Branch</JAVASCRIPT></SPLITINLINE> instructions
  decide whether or not to branch by examining the contents of <SPLITINLINE><SCHEME>flag</SCHEME><JAVASCRIPT>flag</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <TEXT>
  The <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> register determines the sequencing of instructions as
  the machine runs.  This sequencing is implemented by the internal
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>execute</SCHEME><JAVASCRIPT>execute</JAVASCRIPT></SPLITINLINE>.
  In the simulation model, each machine instruction is a data structure
  that includes a
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  of no arguments, called the 
  <INDEX>instruction execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></INDEX>
  <INDEX>execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE><SUBINDEX>in register-machine simulator</SUBINDEX></INDEX>
  <EM>instruction
    execution
    <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE></EM>, such that calling this
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  simulates
  executing the instruction.  As the simulation runs, <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> points to
  the place in the instruction sequence beginning with the next
  instruction to be executed.  
  <!--  \indcode{execute} -->
  <SPLITINLINE><SCHEME>Execute</SCHEME><JAVASCRIPT>Execute</JAVASCRIPT></SPLITINLINE> gets that instruction,
  executes it by calling the instruction execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>, and
  repeats this cycle until there are no more instructions to execute
  (i.e., until <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> points to the end of the instruction sequence).

  <SPLIT>
    <SCHEME>
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{make-new-machine} -->
      (define (make-new-machine)
      (let ((pc (make-register 'pc))
            (flag (make-register 'flag))
            (stack (make-stack))
            (the-instruction-sequence '()))
      (let ((the-ops
            (list (list 'initialize-stack
            (lambda () (stack 'initialize)))))
            (register-table
            (list (list 'pc pc) (list 'flag flag))))
      (define (allocate-register name)
            (if (assoc name register-table)
            (error "Multiply defined register: " name)
            (set! register-table
            (cons (list name (make-register name))
            register-table)))
            'register-allocated)
      (define (lookup-register name)
            (let ((val (assoc name register-table)))
            (if val
            (cadr val)
            (error "Unknown register:" name))))
      (define (execute)
            (let ((insts (get-contents pc)))
            (if (null? insts)
            'done
            (begin
            ((instruction-execution-proc (car insts)))
            (execute)))))
      (define (dispatch message)
            (cond ((eq? message 'start)
            (set-contents! pc the-instruction-sequence)
            (execute))
            ((eq? message 'install-instruction-sequence)
            (lambda (seq) (set! the-instruction-sequence seq)))
            ((eq? message 'allocate-register) allocate-register)
            ((eq? message 'get-register) lookup-register)
            ((eq? message 'install-operations)
            (lambda (ops) (set! the-ops (append the-ops ops))))
            ((eq? message 'stack) stack)
            ((eq? message 'operations) the-ops)
            (else (error "Unknown request - - MACHINE" message))))
      dispatch)))
    </SCHEME>
  </SNIPPET>
    </SCHEME>
    <JAVASCRIPT>
      <FIGURE>
  <SNIPPET>
    <JAVASCRIPT>
function make_new_machine() {
    const pc = make_register("pc");
    const flag = make_register("flag");
    const stack = make_stack();
    let the_instruction_sequence = null;
    let the_ops = list(list("initialize_stack", () => stack("initialize")));
    let register_table = list(list("pc", pc), list("flag", flag));
    function allocate_register(name) {
        if (assoc(name, register_table) === undefined) {
            register_table = pair(list(name, make_register(name)), register_table);
        } else {
            error(name, "Multiply defined register: ");
        }
        return "register_allocated";
    }
    function lookup_register(name) {
        const val = assoc(name, register_table);
        return val === undefined
            ? error(name, "Unknown register:")
            : head(tail(val));
    }
    function execute() {
        const insts = get_contents(pc);
        if (is_null(insts)) {
            return "done";
        } else {
            const proc = instruction_execution_proc(head(insts)); 
            proc(); 
            return execute();
        }
    }
    function dispatch(message) {
        return message === "start"
                ? () => { set_contents(pc, the_instruction_sequence);
                          return execute();                          }
            : message === "install_instruction_sequence"
                ? seq => { the_instruction_sequence = seq; }
            : message === "allocate_register"
                ? allocate_register
            : message === "get_register"
                ? lookup_register
            : message === "install_operations"
                ? ops => { the_ops = append(the_ops, ops); }
            : message === "stack"
                ? stack
            : message === "operations"
                ? the_ops
            : error(message, "Unknown request: MACHINE");
    }
    return dispatch;
}
    </JAVASCRIPT>
  </SNIPPET>
  <CAPTION>The <JAVASCRIPTINLINE>make_new_machine</JAVASCRIPTINLINE> function,
  which implements the basic machine model.</CAPTION>
  <LABEL NAME="fig:make-new-machine"/>
      </FIGURE>
    </JAVASCRIPT>
  </SPLIT>
      </TEXT>

      <TEXT>
  As part of its operation, each instruction execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  modifies <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> to indicate the next instruction to be executed.
  <SPLITINLINE><SCHEME>Branch</SCHEME><JAVASCRIPT>Branch</JAVASCRIPT></SPLITINLINE> and <SPLITINLINE><SCHEME>goto</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>go_to</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> instructions change <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> to point to
  the new destination.  All other instructions simply advance <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE>,
  making it point to the next instruction in the sequence.  Observe that
  each call to <SPLITINLINE><SCHEME>execute</SCHEME><JAVASCRIPT>execute</JAVASCRIPT></SPLITINLINE> calls <SPLITINLINE><SCHEME>execute</SCHEME><JAVASCRIPT>execute</JAVASCRIPT></SPLITINLINE> again, but this does
  not produce an infinite loop because running the instruction execution
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  changes the contents of <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <TEXT>
  <SPLITINLINE><SCHEME>Make-new-machine</SCHEME><JAVASCRIPT><JAVASCRIPTINLINE>Make_new_machine</JAVASCRIPTINLINE></JAVASCRIPT></SPLITINLINE> returns a
  <SPLITINLINE><SCHEME>dispatch</SCHEME><JAVASCRIPT>dispatch</JAVASCRIPT></SPLITINLINE>
  <SPLITINLINE><SCHEME>procedure</SCHEME><JAVASCRIPT>function</JAVASCRIPT></SPLITINLINE>
  that implements message-passing
  access to the internal state.  Notice that starting the machine is
  accomplished by setting <SPLITINLINE><SCHEME>pc</SCHEME><JAVASCRIPT>pc</JAVASCRIPT></SPLITINLINE> to the beginning of the instruction
  sequence and calling <SPLITINLINE><SCHEME>execute</SCHEME><JAVASCRIPT>execute</JAVASCRIPT></SPLITINLINE>.
      </TEXT>

      <TEXT>
  For convenience, we provide an alternate procedural interface to a
  machine<APOS/>s <SPLITINLINE><SCHEME>start</SCHEME><JAVASCRIPT>start</JAVASCRIPT></SPLITINLINE> operation,
  as well as
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  to set and examine register contents,
  as specified at the beginning of section<SPACE/><REF NAME="sec:simulator"/>:

  <SNIPPET>
    <SCHEME>
      <!-- \indcodeplus*{start}{register machine}-->
      (define (start machine)
      (machine 'start))

      <!--  \indcode*{get-register-contents} -->
      (define (get-register-contents machine register-name)
      (get-contents (get-register machine register-name)))

      <!--  \indcode*{set-register-contents!} -->
      (define (set-register-contents! machine register-name value)
      (set-contents! (get-register machine register-name) value)
      'done)
    </SCHEME>
  <JAVASCRIPT>
function start(machine) {
    return machine("start")();
}

function get_register_contents(machine, register_name) {
    return get_contents(get_register(machine, register_name));
}

function set_register_contents(machine, register_name, value) {
    set_contents(get_register(machine, register_name), value);
    return "done";
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

      <TEXT>
  These
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  (and many
  <SPLITINLINE><SCHEME>procedures</SCHEME><JAVASCRIPT>functions</JAVASCRIPT></SPLITINLINE>
  in sections<SPACE/><REF NAME="sec:assembler"/>
  and <REF NAME="sec:ex-proc"/>) use the following to look up the register with a
  given name in a given machine:
  <SNIPPET>
    <SCHEME>
      <!--  \indcode*{get-register} -->
      (define (get-register machine reg-name)
      ((machine 'get-register) reg-name))
    </SCHEME>
  <JAVASCRIPT>
function get_register(machine, reg_name) {
    return machine("get_register")(reg_name);
}
  </JAVASCRIPT>
  </SNIPPET>
      </TEXT>

    </SUBSECTION>
